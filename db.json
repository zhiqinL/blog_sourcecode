{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/uploads/tree_traverse/binary_tree.png","path":"uploads/tree_traverse/binary_tree.png","modified":0,"renderable":0},{"_id":"source/uploads/replace_screen/pic2.png","path":"uploads/replace_screen/pic2.png","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"source/uploads/replace_screen/pic4.png","path":"uploads/replace_screen/pic4.png","modified":0,"renderable":0},{"_id":"source/uploads/replace_screen/pic5.png","path":"uploads/replace_screen/pic5.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/uploads/replace_screen/pic3.png","path":"uploads/replace_screen/pic3.png","modified":0,"renderable":0},{"_id":"source/uploads/replace_screen/pic1.png","path":"uploads/replace_screen/pic1.png","modified":0,"renderable":0},{"_id":"source/uploads/replace_screen/pic6.png","path":"uploads/replace_screen/pic6.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"673630a9fe89600796c848b08061052ad2deb39d","modified":1503559207000},{"_id":"themes/next/.DS_Store","hash":"b4031ca706d0e344ab2ab686d4decf4474d9e602","modified":1500811161000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1500807242000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1500807242000},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1500807242000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1500807242000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1500807242000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1500807242000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1500807242000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1500807242000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1500807242000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1500807242000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1500807242000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1500807242000},{"_id":"themes/next/_config.yml","hash":"89648bf40e7190629f43183b0ab36dd9ee60dfa4","modified":1504634531000},{"_id":"themes/next/bower.json","hash":"be0a430362cb73a7e3cf9ecf51a67edf8214b637","modified":1500807242000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1500807242000},{"_id":"themes/next/package.json","hash":"6b5bfec48776ddf9c03811b1ff2cb2b615eccc88","modified":1500807242000},{"_id":"source/_posts/kmp-algorithm.md","hash":"cb04937ae1ee6ff51642790813088f6ee986b0d4","modified":1502784188000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1503558598000},{"_id":"source/_posts/hello-world.md","hash":"1521252422e1769296827248951df93f3996fcae","modified":1500812693000},{"_id":"source/_posts/markdown-record.md","hash":"5351e8edd6d6859281046084c985f565e0fd4ca5","modified":1500990555000},{"_id":"source/_posts/replace-screen.md","hash":"b262ae5e911b9eb14065c29ba76523d254a28827","modified":1501492726000},{"_id":"source/_posts/sort.md","hash":"2bc1791ec2529c8ca645de10f6739c9478fae572","modified":1502786415000},{"_id":"source/_posts/tree-traversal.md","hash":"d8ef672aff845239def701a52b645fb4fec12268","modified":1503564089000},{"_id":"source/about/index.md","hash":"e94e4beb8f51fa29b291c82f548c27a6a876cd6e","modified":1500823181000},{"_id":"source/categories/index.md","hash":"387e746bb35e3595c6efa3eedee3b0519d3718fc","modified":1500809201000},{"_id":"source/tags/index.md","hash":"fbe3e21f1813a162d4758a54d2c3871cb0f51476","modified":1500809183000},{"_id":"source/uploads/.DS_Store","hash":"b248259c65baf8ee1c8ba7a26d0649f8a6764004","modified":1503559215000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1500807242000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1500807242000},{"_id":"themes/next/.git/index","hash":"de8c4218082369890683796e7d3b9f8283d48e1b","modified":1500809933000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1500807185000},{"_id":"themes/next/.git/packed-refs","hash":"870ec35d9df98c7054f4035cf6eac8090b6aa366","modified":1500807242000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"12002f77e538a3c686d897e9b521a6d555b49f88","modified":1500807242000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"37bd0ec1d655c601946fc5f5ac2fe8ed1e529b77","modified":1500807242000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1500807242000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1500807242000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1500807242000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1500807242000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1500807242000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1500807242000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1500807242000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1500807242000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1500807242000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1500807242000},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1500807242000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1500807242000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1500807242000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1500807242000},{"_id":"themes/next/layout/_layout.swig","hash":"06b1eab2e00273e0b94bd32dc682bd92c1e0a747","modified":1500807242000},{"_id":"themes/next/layout/archive.swig","hash":"5de4dca06b05d99e4f6bad617a4b8f4f3592fb01","modified":1500807242000},{"_id":"themes/next/layout/category.swig","hash":"82e7bc278559b4335ad974659104eaaf04863032","modified":1500807242000},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1500807242000},{"_id":"themes/next/layout/schedule.swig","hash":"f93c53f6fd5c712584f6efba6f770c30fa8a3e80","modified":1500807242000},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1500807242000},{"_id":"themes/next/layout/page.swig","hash":"baa667bc801349d5c4984c0f172973d3780400df","modified":1500807242000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1500807242000},{"_id":"themes/next/layout/tag.swig","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1500807242000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1500807242000},{"_id":"themes/next/source/.DS_Store","hash":"495dc0d217dbc3e7cb0c015a4aa9af3e7011d37f","modified":1500810145000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1500807242000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1500807242000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1500807242000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500807242000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1500807185000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1500807185000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1500807185000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1500807185000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1500807185000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1500807185000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1500807185000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1500807185000},{"_id":"themes/next/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1500807185000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1500807185000},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1500807185000},{"_id":"themes/next/.git/logs/HEAD","hash":"27a22ed6dfd598d29b8ed5ff724264cd368529b0","modified":1500807242000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1500807242000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1500807242000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1500807242000},{"_id":"themes/next/layout/_macro/post.swig","hash":"d6fe43765bc01017ca3f9a384eeddaf28b6382c8","modified":1500807242000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"b16fcbf0efd20c018d7545257a8533c497ea7647","modified":1500807242000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1500807242000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"3dac0f5af6a590ea49a3d172ff6fafbf50cc2604","modified":1500807242000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1500807242000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"ce7094ee05878161e7568a6dfae5b56ff3fbd6e1","modified":1500807242000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1500807242000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1500807242000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1500807242000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6a7eb93d8aa7d4baa472890bd666b921f449d8af","modified":1500807242000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1500807242000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1500807242000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1500807242000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1500807242000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1500807242000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1500807242000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1500807242000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1500807242000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1500807242000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1500807242000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1500807242000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1500807242000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1500807242000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1500807242000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1500807242000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1500807242000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1500807242000},{"_id":"themes/next/scripts/tags/note.js","hash":"21b102db8a01c7b15ae2c0ea3ef3d4cf807ec6ed","modified":1500807242000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1500807242000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1500807242000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1500807242000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1500807242000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1500807242000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1500807242000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1500807242000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1500807242000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1500807242000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1500807242000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1500807242000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1500807242000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1500807242000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1500807242000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1500807242000},{"_id":"source/uploads/tree_traverse/binary_tree.png","hash":"00653b44683b73816af78968f7417c462ecceaac","modified":1503545148000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500807242000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500807242000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500807242000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500807242000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500807242000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500807242000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500807242000},{"_id":"source/uploads/replace_screen/pic2.png","hash":"a28f0e56b878388c8bf72821df822490323c73a0","modified":1501489403000},{"_id":"themes/next/.git/refs/heads/master","hash":"2fe6a6076565858485685af27e69f5704b071e08","modified":1500807242000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1500807242000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1500807242000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1500807242000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1500807242000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1500807242000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1500807242000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1500807242000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1500807242000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1500807242000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1500807242000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1500807242000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1500807242000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1500807242000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1500807242000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1500807242000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1500807242000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1500807242000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1500807242000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1500807242000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1500807242000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1500807242000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1500807242000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1500807242000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1500807242000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1500807242000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1500807242000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"ee63aa2e49507b884a2d56778479cf01c723d751","modified":1500807242000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1500807242000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1500807242000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1500807242000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1500807242000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1500807242000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1500807242000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1500807242000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1500807242000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"ceceb93029d98cd63a689ad08e25fbe7f6b7ee1c","modified":1500807242000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1500807242000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1500807242000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d6a793bcada68d4b6c58392546bc48a482e4a7d3","modified":1500807242000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1500807242000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1500807242000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"03190d70e2347a0b29d185295445c6762a4455e8","modified":1500807242000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1500807242000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1500807242000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1500807242000},{"_id":"themes/next/source/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1500807242000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1500807242000},{"_id":"themes/next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1500807242000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1500807242000},{"_id":"themes/next/source/js/src/utils.js","hash":"0fcb80ec11e6df05ed1a07b9338bef2669f93a70","modified":1500807242000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1500807242000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1500807242000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1500807242000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1500807242000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1500807242000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1500807242000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1500807242000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1500807242000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1500807242000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1500807242000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1500807242000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1500807242000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1500807242000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1500807242000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1500807242000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1500807242000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1500807242000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1500807242000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1500807242000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1500807242000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1500807242000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1500807242000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1500807242000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1500807242000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1500807242000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1500807242000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1500807242000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1500807242000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1500807242000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1500807242000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1500807242000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1500807242000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1500807242000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1500807242000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1500807242000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1500807242000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1500807242000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1500807242000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1500807242000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1500807242000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1500807242000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1500807242000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1500807242000},{"_id":"source/uploads/replace_screen/pic4.png","hash":"60ca58b7cfd4b7172ecc3429a7c4ee3092b3ed80","modified":1501490671000},{"_id":"source/uploads/replace_screen/pic5.png","hash":"dfcf9b20740505840ec325426a892a1a7c97fa5d","modified":1501489437000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1500807242000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"27a22ed6dfd598d29b8ed5ff724264cd368529b0","modified":1500807242000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1500807242000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1500807242000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"b5074a61d04757b6adf8f757668b9fea01730a6c","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1500807242000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1500807242000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1500807242000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1500807242000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1500807242000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1500807242000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1500807242000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1500807242000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1500807242000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1500807242000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1500807242000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1500807242000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1500807242000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1500807242000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1500807242000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1500807242000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1500807242000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1500807242000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1500807242000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1500807242000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1500807242000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1500807242000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1500807242000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1500807242000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1500807242000},{"_id":"themes/next/source/images/avatar.png","hash":"c9e6bdae250a3f0ec92c1bc6b1e64a14447425da","modified":1500805661000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1500807242000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1500807242000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1500807242000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1500807242000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1500807242000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1500807242000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1500807242000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1500807242000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1500807242000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1500807242000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1500807242000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1500807242000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1500807242000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1500807242000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1500807242000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1500807242000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1500807242000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1500807242000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1500807242000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1500807242000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1500807242000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1500807242000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1500807242000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1500807242000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"27a22ed6dfd598d29b8ed5ff724264cd368529b0","modified":1500807242000},{"_id":"themes/next/.git/objects/pack/pack-409c1e8cf24a4047c5340a3b67703bd6e4d80fc9.idx","hash":"30f6f38647ae488e802394e45759faac6901424f","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"468bc734f47209096588ef1a8e55e60a3b12aa63","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"dfc86d37f5b580977d82af6ef835082d09a0c499","modified":1500807242000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"dd310c2d999185e881db007360176ee2f811df10","modified":1500807242000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1500807242000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1500807242000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1500807242000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1500807242000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1500807242000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1500807242000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1500807242000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1500807242000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1500807242000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1500807242000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1500807242000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1500807242000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1500807242000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1500807242000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1500807242000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1500807242000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1500807242000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1500807242000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1500807242000},{"_id":"source/uploads/replace_screen/pic3.png","hash":"ba36e1d6b5b11259274b4cc12e2565a93ff1e372","modified":1501490659000},{"_id":"source/uploads/replace_screen/pic1.png","hash":"743dac9c3c15e5f71c4facb13d6ae6402bfcfdf2","modified":1501488532000},{"_id":"source/uploads/replace_screen/pic6.png","hash":"c22c8dca63c807dd1847dd706de6c73f5794f12b","modified":1501492449000},{"_id":"themes/next/.git/objects/pack/pack-409c1e8cf24a4047c5340a3b67703bd6e4d80fc9.pack","hash":"92dc631ea5b1e7109d4a084d412fc6a25b77dd28","modified":1500807242000},{"_id":"public/atom.xml","hash":"07e91df770d71fbe97019aca68c34122db883ce9","modified":1504634811878},{"_id":"public/search.xml","hash":"b2e4c566420084775ea119d7115f9dec6ade4737","modified":1504634811887},{"_id":"public/post-sitemap.xml","hash":"0ee91f701606efe0eb284350b067466505a499d8","modified":1504634811888},{"_id":"public/page-sitemap.xml","hash":"2ad2c8c72581844c9f66fe88c8cb75bee81ef8a5","modified":1504634811888},{"_id":"public/category-sitemap.xml","hash":"c46665a0fa64bc7919087589897d11c700505c6c","modified":1504634811888},{"_id":"public/tag-sitemap.xml","hash":"0827708a3be3c00150ecfe737480afbfa9e80d65","modified":1504634811888},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1504634811888},{"_id":"public/sitemap.xml","hash":"aefadbd1f974e27f7273366fdaf4b0e5d14c43db","modified":1504634811888},{"_id":"public/about/index.html","hash":"f1cd409da33338fe49a4dc3e9cfb4544818051ad","modified":1504634811906},{"_id":"public/categories/index.html","hash":"80033f5803e49d7455fdfdd087df691372cf78d8","modified":1504634811906},{"_id":"public/tags/index.html","hash":"6a58d945144b92130d44c52074189f6a1f1b2330","modified":1504634811906},{"_id":"public/2017/08/24/tree-traversal/index.html","hash":"582f9201ea33938d86fa6ef3933d0bdad9d47f3c","modified":1504634811907},{"_id":"public/2017/08/15/sort/index.html","hash":"3ee6fc3f8a81360d935f418ebd339e3d43374eb1","modified":1504634811907},{"_id":"public/2017/08/13/kmp-algorithm/index.html","hash":"19ea8534dbafe4ee0c2c36fff1d865d7c6bef053","modified":1504634811907},{"_id":"public/2017/07/31/replace-screen/index.html","hash":"1e32b7b4e55db8f382f5a601f6dc6e318cbec2fb","modified":1504634811907},{"_id":"public/2017/07/25/markdown-record/index.html","hash":"33e6f179147b9d07044b2d323487f5ebd55dff8a","modified":1504634811907},{"_id":"public/2017/07/23/hello-world/index.html","hash":"fe7822f94f039a238c4c1d300c1395f1e9b916c2","modified":1504634811907},{"_id":"public/archives/index.html","hash":"36e1f207bde62105358a19c3bb0d3f34946ce779","modified":1504634811907},{"_id":"public/archives/2017/index.html","hash":"7d52717383e40843393e7769d7e58d40cee0bafb","modified":1504634811907},{"_id":"public/archives/2017/07/index.html","hash":"8f60767c22939b55a5449bee030291c51eede413","modified":1504634811907},{"_id":"public/archives/2017/08/index.html","hash":"f8a140067763ec8607582fba4c0d1da6bc36503c","modified":1504634811907},{"_id":"public/categories/技术/index.html","hash":"46a1e674a862a6f77e50339f06d8b60e3f498a5c","modified":1504634811907},{"_id":"public/categories/生活/index.html","hash":"b107fcc837f9e9e7c8311a0b925b49b5976ef0c8","modified":1504634811907},{"_id":"public/tags/kmp/index.html","hash":"570aba2161b28c8f73d904906b2c133a02f94004","modified":1504634811910},{"_id":"public/index.html","hash":"c7154952560997e2d1229f72660a19d97d8a2ae0","modified":1504634811910},{"_id":"public/tags/leetcode/index.html","hash":"86fda340f435b1930bbbe89a8b26c24c63083e69","modified":1504634811910},{"_id":"public/tags/随笔/index.html","hash":"06fc6e41dd3c62e3aed0da33531250637fdc1358","modified":1504634811910},{"_id":"public/tags/markdown/index.html","hash":"c921149b891d4634c793ac6cd3757e5427e5c015","modified":1504634811910},{"_id":"public/tags/搞机/index.html","hash":"d46063f047b3db1f2fa6ea88fbcd10f0d3140098","modified":1504634811910},{"_id":"public/tags/sort/index.html","hash":"ee42d2074c437276342e889fb2a1efba33e81f89","modified":1504634811911},{"_id":"public/tags/binary-tree/index.html","hash":"809d1985507eb100540a96258fdfe48ba9d8deaa","modified":1504634811911},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1504634811921},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1504634811921},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1504634811921},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1504634811921},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1504634811921},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1504634811921},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1504634811921},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1504634811921},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1504634811921},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1504634811921},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1504634811921},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1504634811921},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1504634811921},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1504634811921},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1504634811921},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1504634811921},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1504634811921},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1504634811921},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1504634811921},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1504634811921},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1504634811921},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1504634811921},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1504634811921},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1504634811921},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1504634811922},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1504634811922},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1504634811922},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1504634811922},{"_id":"public/uploads/tree_traverse/binary_tree.png","hash":"00653b44683b73816af78968f7417c462ecceaac","modified":1504634812486},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1504634812488},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1504634812499},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1504634812509},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1504634812509},{"_id":"public/js/src/bootstrap.js","hash":"03190d70e2347a0b29d185295445c6762a4455e8","modified":1504634812509},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1504634812509},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1504634812509},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1504634812509},{"_id":"public/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1504634812509},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1504634812509},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1504634812509},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1504634812509},{"_id":"public/js/src/utils.js","hash":"0fcb80ec11e6df05ed1a07b9338bef2669f93a70","modified":1504634812509},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1504634812509},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1504634812509},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1504634812509},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1504634812509},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1504634812510},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1504634812510},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1504634812510},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1504634812510},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1504634812510},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1504634812510},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1504634812510},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1504634812510},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1504634812510},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1504634812510},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1504634812510},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1504634812510},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1504634812510},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1504634812510},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1504634812510},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1504634812510},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1504634812510},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1504634812510},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1504634812510},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1504634812510},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1504634812510},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1504634812510},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1504634812510},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1504634812510},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1504634812510},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1504634812510},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1504634812510},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1504634812510},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1504634812510},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1504634812510},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1504634812510},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1504634812510},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1504634812510},{"_id":"public/css/main.css","hash":"1cf9161085304a64ed1412ba5633da8b56a12b9b","modified":1504634812511},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1504634812511},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1504634812511},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1504634812511},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1504634812511},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1504634812512},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1504634812512},{"_id":"public/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1504634812512},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1504634812512},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1504634812512},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1504634812512},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1504634812512},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1504634812512},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1504634812512},{"_id":"public/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1504634812512},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1504634812512},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1504634812512},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1504634812512},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1504634812513},{"_id":"public/uploads/replace_screen/pic2.png","hash":"a28f0e56b878388c8bf72821df822490323c73a0","modified":1504634812513},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1504634812514},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1504634812514},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1504634812515},{"_id":"public/uploads/replace_screen/pic4.png","hash":"60ca58b7cfd4b7172ecc3429a7c4ee3092b3ed80","modified":1504634812521},{"_id":"public/uploads/replace_screen/pic5.png","hash":"dfcf9b20740505840ec325426a892a1a7c97fa5d","modified":1504634812521},{"_id":"public/images/avatar.png","hash":"c9e6bdae250a3f0ec92c1bc6b1e64a14447425da","modified":1504634812524},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1504634812531},{"_id":"public/uploads/replace_screen/pic3.png","hash":"ba36e1d6b5b11259274b4cc12e2565a93ff1e372","modified":1504634812554},{"_id":"public/uploads/replace_screen/pic1.png","hash":"743dac9c3c15e5f71c4facb13d6ae6402bfcfdf2","modified":1504634812555},{"_id":"public/uploads/replace_screen/pic6.png","hash":"c22c8dca63c807dd1847dd706de6c73f5794f12b","modified":1504634812572}],"Category":[{"name":"技术","_id":"cj77wke330004fiilg7v14mwt"},{"name":"生活","_id":"cj77wke3d000afiilajzmxx5m"}],"Data":[],"Page":[{"title":"Author Info","date":"2017-07-24T02:15:05.000Z","_content":"\n<span style=\"font-size: 20px\">关于我:</span>\n- 美帝master在读程序员一枚\n- 熟悉Java相关的程序开发(ex. \bWeb, Android)\n- 喜欢和数据打交道\n\n***\n\n<span style=\"font-size: 20px\">About me:</span>\n- USC Master Student\n- Experienced in Java Application Development\n- Actively seeking full-time SDE position\n\n***\n\n<span style=\"font-size: 20px\">Contact me:</span>\n- zhiqinli@usc.edu\n- [GitHub Link](https://github.com/zhiqinL)\n- [Linkedin Link](https://www.linkedin.com/in/zhiqin-liao-960096100/)\n- [Download Resume](#)\n\n***","source":"about/index.md","raw":"---\ntitle: Author Info\ndate: 2017-07-23 19:15:05\n---\n\n<span style=\"font-size: 20px\">关于我:</span>\n- 美帝master在读程序员一枚\n- 熟悉Java相关的程序开发(ex. \bWeb, Android)\n- 喜欢和数据打交道\n\n***\n\n<span style=\"font-size: 20px\">About me:</span>\n- USC Master Student\n- Experienced in Java Application Development\n- Actively seeking full-time SDE position\n\n***\n\n<span style=\"font-size: 20px\">Contact me:</span>\n- zhiqinli@usc.edu\n- [GitHub Link](https://github.com/zhiqinL)\n- [Linkedin Link](https://www.linkedin.com/in/zhiqin-liao-960096100/)\n- [Download Resume](#)\n\n***","updated":"2017-07-23T15:19:41.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj77wke300001fiilz4iblgsa","content":"<p><span style=\"font-size: 20px\">关于我:</span></p>\n<ul>\n<li>美帝master在读程序员一枚</li>\n<li>熟悉Java相关的程序开发(ex. \bWeb, Android)</li>\n<li>喜欢和数据打交道</li>\n</ul>\n<hr>\n<p><span style=\"font-size: 20px\">About me:</span></p>\n<ul>\n<li>USC Master Student</li>\n<li>Experienced in Java Application Development</li>\n<li>Actively seeking full-time SDE position</li>\n</ul>\n<hr>\n<p><span style=\"font-size: 20px\">Contact me:</span></p>\n<ul>\n<li>zhiqinli@usc.edu</li>\n<li><a href=\"https://github.com/zhiqinL\" target=\"_blank\" rel=\"external\">GitHub Link</a></li>\n<li><a href=\"https://www.linkedin.com/in/zhiqin-liao-960096100/\" target=\"_blank\" rel=\"external\">Linkedin Link</a></li>\n<li><a href=\"#\">Download Resume</a></li>\n</ul>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<p><span style=\"font-size: 20px\">关于我:</span></p>\n<ul>\n<li>美帝master在读程序员一枚</li>\n<li>熟悉Java相关的程序开发(ex. \bWeb, Android)</li>\n<li>喜欢和数据打交道</li>\n</ul>\n<hr>\n<p><span style=\"font-size: 20px\">About me:</span></p>\n<ul>\n<li>USC Master Student</li>\n<li>Experienced in Java Application Development</li>\n<li>Actively seeking full-time SDE position</li>\n</ul>\n<hr>\n<p><span style=\"font-size: 20px\">Contact me:</span></p>\n<ul>\n<li>zhiqinli@usc.edu</li>\n<li><a href=\"https://github.com/zhiqinL\" target=\"_blank\" rel=\"external\">GitHub Link</a></li>\n<li><a href=\"https://www.linkedin.com/in/zhiqin-liao-960096100/\" target=\"_blank\" rel=\"external\">Linkedin Link</a></li>\n<li><a href=\"#\">Download Resume</a></li>\n</ul>\n<hr>\n"},{"title":"Categories","date":"2017-07-24T01:56:08.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: Categories\ndate: 2017-07-23 18:56:08\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-07-23T11:26:41.000Z","path":"categories/index.html","layout":"page","_id":"cj77wke330003fiilzabnj376","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","date":"2017-07-24T01:56:00.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2017-07-23 18:56:00\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-07-23T11:26:23.000Z","path":"tags/index.html","layout":"page","_id":"cj77wke390007fiildba3chdt","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"KMP字符串匹配算法","date":"2017-08-14T00:30:38.000Z","_content":"\n### 字符串匹配\n字符串匹配是算法题中常考的一个类型，而且通常会在更复杂的题目中和其他类型的问题搭配出现。\n举例来说，有一个字符串\"BBC ABCDAB ABCDABCDABDE\"，来检测这其中是否含有另一个字符串\"ABCDABD\"就是字符串的匹配问题。\n\n#### Brust Force\n**原字符串:**   \"BBC ABCDAB ABCDABCDABDE\" 长度: m  \n**匹配字符串:** \"ABCDABD\"                 长度: n   \n**时间复杂度为:** O(mn)  \n假设原字符串和匹配字符串的长度分别为m和n，暴力解法brust force通常是从第一个字符开始检测，如果遇到不匹配，则将用于匹配的字符向后移动一位，再继续从头开始匹配，直到找到完全匹配的位置或遍历完整个字符串，时间复杂度为mn。\n\n<!--more-->\n\n#### KMP\n**原字符串:**   \"BBC ABCDAB ABCDABCDABDE\" 长度: m  \n**匹配字符串:** \"ABCDABD\"                 长度: n   \n**时间复杂度为:** O(m + n)  \n与暴力解法不同，KMP在遇到不匹配的部位时，不是直接向后移动一位，而是根据一个部分匹配值表，来确定移动的位置，具体算法步骤如下:  \n\n##### 具体步骤\n\n1.\n```\nBBC ABCDAB ABCDABCDABDE\n|\nABCDABD\n```\n首先，字符串\"BBC ABCDAB ABCDABCDABDE\"的第一个字符与搜索词\"ABCDABD\"的第一个字符，进行比较。因为B与A不匹配，所以搜索词后移一位。  \n\n2.\n```\nBBC ABCDAB ABCDABCDABDE\n |\n ABCDABD\n```\n因为B与A不匹配，搜索词再往后移。\n\n\n3.\n```\nBBC ABCDAB ABCDABCDABDE\n    |\n    ABCDABD\n```\n就这样，直到字符串有一个字符，与搜索词的第一个字符相同为止。\n\n4.\n```\nBBC ABCDAB ABCDABCDABDE\n     |\n    ABCDABD\n```\n接着比较字符串和搜索词的下一个字符，还是相同。\n\n5.\n```\nBBC ABCDAB ABCDABCDABDE\n          |\n    ABCDABD\n```\n直到字符串有一个字符，与搜索词对应的字符不相同为止。  \n一个基本事实是，当空格与D不匹配时，你其实知道前面六个字符是\"ABCDAB\"。KMP算法的想法是，设法利用这个已知信息，不要把\"搜索位置\"移回已经比较过的位置，继续把它向后移，这样就提高了效率。\n\n6.\n上诉所说的已知信息指的就是部分匹配值:  \n\n|搜索词     | A | B | C | D | A | B | D |\n|:---------|:-:|:-:|:-:|:-:|:-:|:-:|:-:|\n|部分匹配值 | 0 | 0 | 0 | 0 | 1 | 2 | 0 |\n\n部分匹配值具体如何计算下面会讲到。\n\n7.\n```\nBBC ABCDAB ABCDABCDABDE\n          |\n    ABCDABD\n```\n当空格与D不匹配时，查表可以最后一个匹配字符B对应的部分匹配值为2，因此可以按照下面的公式计算出匹配字符串应该向后移动的位数:\n`移动位数 = 已匹配字符数 - 对应的部分匹配值`\n因此在这个例子里，应该讲匹配字符串向后移动 `6 - 2 = 4` 位。\n\n8.\n```\nBBC ABCDAB ABCDABCDABDE\n          |\n        ABCDABD\n```\n因为空格与Ｃ不匹配，搜索词还要继续往后移。这时，已匹配的字符数为2（\"AB\"），对应的\"部分匹配值\"为0。所以，移动位数 = 2 - 0，结果为 2，于是将搜索词向后移2位。\n\n9.\n```\nBBC ABCDAB ABCDABCDABDE\n          |\n          ABCDABD\n```\n因为空格与A不匹配，继续后移一位。\n\n10.\n```\nBBC ABCDAB ABCDABCDABDE\n                 |\n           ABCDABD\n```\n逐位比较，直到发现C与D不匹配。于是，移动位数 = 6 - 2，继续将搜索词向后移动4位。\n\n11.\n```\nBBC ABCDAB ABCDABCDABDE\n\n               ABCDABD\n```\n逐位比较，直到搜索词的最后一位，发现完全匹配，于是搜索完成。如果还要继续搜索（即找出全部匹配），移动位数 = 7 - 0，再将搜索词向后移动7位，这里就不再重复了。\n\n##### 部分匹配值\n\n|搜索词     | A | B | C | D | A | B | D |\n|:---------|:-:|:-:|:-:|:-:|:-:|:-:|:-:|\n|部分匹配值 | 0 | 0 | 0 | 0 | 1 | 2 | 0 |\n\n`部分匹配值` 就是 `前缀` 和 `后缀` 的最长的共有元素的长度。以\"ABCDABD\"为例，\n\n```\n\"A\" 的前缀和后缀都为空集，共有元素的长度为0；\n\"AB\" 的前缀为[A]，后缀为[B]，共有元素的长度为0；\n\"ABC\" 的前缀为[A, AB]，后缀为[BC, C]，共有元素的长度0；\n\"ABCD\" 的前缀为[A, AB, ABC]，后缀为[BCD, CD, D]，共有元素的长度为0；\n\"ABCDA\" 的前缀为[A, AB, ABC, ABCD]，后缀为[BCDA, CDA, DA, A]，共有元素为\"A\"，长度为1；\n\"ABCDAB\" 的前缀为[A, AB, ABC, ABCD, ABCDA]，后缀为[BCDAB, CDAB, DAB, AB, B]，共有元素为\"AB\"，长度为2；\n\"ABCDABD\" 的前缀为[A, AB, ABC, ABCD, ABCDA, ABCDAB]，后缀为[BCDABD, CDABD, DABD, ABD, BD, D]，共有元素的长度为0。\n```\n\n##### 代码实现\nLeetcode 28题问题描述:\n\n```\nReturns the index of the first occurrence of needle in haystack, or -1 if needle \nis not part of haystack.\n```\n\n* 部分匹配值的算法实现：\n\n```java\nprivate int[] generateNext(String needle) {\n    int[] next = new int[needle.length()];\n    char[] chs = needle.toCharArray();\n    int i = 0, j = 1;\n    while(j < chs.length) {\n        if(chs[i] == chs[j]) {\n            next[j] = i + 1;\n            i++;\n            j++;\n        } else {\n            if(i == 0) {\n                next[j] = 0;\n                j++;\n            } else {\n                i = next[i - 1];\n            }\n        }\n    }\n    return next;\n}\n```\n给定一个字符串，通过以上代码可以得出该字符串相应的部分匹配值数组 `next`。\n\n* 字符串匹配\n\n```java\npublic int strStr(String haystack, String needle) {\n    if(haystack.length() < needle.length()) return -1;\n    \n    int i = 0, j = 0;\n    int[] next = generateNext(needle);\n    char[] h_chs = haystack.toCharArray(), n_chs = needle.toCharArray();\n    while(i < h_chs.length && j < n_chs.length) {\n        if(h_chs[i] == n_chs[j]) {\n            i++;\n            j++;\n        } else {\n            if(j == 0) {\n                i++;\n            } else {\n                j = next[j - 1];\n            }\n        }\n    }\n    return j == n_chs.length? i - n_chs.length : -1;\n}\n```\n根据之前计算出的部分匹配值数组 `next`，可以通过如上代码计算出匹配字符串 `needle` 在原字符串 `haystack` 中相应的匹配位置。\n\n#### 相关Leetcode题目\n\n[Leetcode: 28. Implement strStr()](https://leetcode.com/problems/implement-strstr/description/)  \n[Leetcode: 459. Repeated Substring Pattern](https://leetcode.com/problems/repeated-substring-pattern/description/)\n\n### 相关参考\n> * [字符串匹配的KMP算法](http://kb.cnblogs.com/page/176818/)\n> ","source":"_posts/kmp-algorithm.md","raw":"---\ntitle: KMP字符串匹配算法\ndate: 2017-08-13 17:30:38\ntags: \n    - kmp\n    - leetcode\ncategories: 技术\n---\n\n### 字符串匹配\n字符串匹配是算法题中常考的一个类型，而且通常会在更复杂的题目中和其他类型的问题搭配出现。\n举例来说，有一个字符串\"BBC ABCDAB ABCDABCDABDE\"，来检测这其中是否含有另一个字符串\"ABCDABD\"就是字符串的匹配问题。\n\n#### Brust Force\n**原字符串:**   \"BBC ABCDAB ABCDABCDABDE\" 长度: m  \n**匹配字符串:** \"ABCDABD\"                 长度: n   \n**时间复杂度为:** O(mn)  \n假设原字符串和匹配字符串的长度分别为m和n，暴力解法brust force通常是从第一个字符开始检测，如果遇到不匹配，则将用于匹配的字符向后移动一位，再继续从头开始匹配，直到找到完全匹配的位置或遍历完整个字符串，时间复杂度为mn。\n\n<!--more-->\n\n#### KMP\n**原字符串:**   \"BBC ABCDAB ABCDABCDABDE\" 长度: m  \n**匹配字符串:** \"ABCDABD\"                 长度: n   \n**时间复杂度为:** O(m + n)  \n与暴力解法不同，KMP在遇到不匹配的部位时，不是直接向后移动一位，而是根据一个部分匹配值表，来确定移动的位置，具体算法步骤如下:  \n\n##### 具体步骤\n\n1.\n```\nBBC ABCDAB ABCDABCDABDE\n|\nABCDABD\n```\n首先，字符串\"BBC ABCDAB ABCDABCDABDE\"的第一个字符与搜索词\"ABCDABD\"的第一个字符，进行比较。因为B与A不匹配，所以搜索词后移一位。  \n\n2.\n```\nBBC ABCDAB ABCDABCDABDE\n |\n ABCDABD\n```\n因为B与A不匹配，搜索词再往后移。\n\n\n3.\n```\nBBC ABCDAB ABCDABCDABDE\n    |\n    ABCDABD\n```\n就这样，直到字符串有一个字符，与搜索词的第一个字符相同为止。\n\n4.\n```\nBBC ABCDAB ABCDABCDABDE\n     |\n    ABCDABD\n```\n接着比较字符串和搜索词的下一个字符，还是相同。\n\n5.\n```\nBBC ABCDAB ABCDABCDABDE\n          |\n    ABCDABD\n```\n直到字符串有一个字符，与搜索词对应的字符不相同为止。  \n一个基本事实是，当空格与D不匹配时，你其实知道前面六个字符是\"ABCDAB\"。KMP算法的想法是，设法利用这个已知信息，不要把\"搜索位置\"移回已经比较过的位置，继续把它向后移，这样就提高了效率。\n\n6.\n上诉所说的已知信息指的就是部分匹配值:  \n\n|搜索词     | A | B | C | D | A | B | D |\n|:---------|:-:|:-:|:-:|:-:|:-:|:-:|:-:|\n|部分匹配值 | 0 | 0 | 0 | 0 | 1 | 2 | 0 |\n\n部分匹配值具体如何计算下面会讲到。\n\n7.\n```\nBBC ABCDAB ABCDABCDABDE\n          |\n    ABCDABD\n```\n当空格与D不匹配时，查表可以最后一个匹配字符B对应的部分匹配值为2，因此可以按照下面的公式计算出匹配字符串应该向后移动的位数:\n`移动位数 = 已匹配字符数 - 对应的部分匹配值`\n因此在这个例子里，应该讲匹配字符串向后移动 `6 - 2 = 4` 位。\n\n8.\n```\nBBC ABCDAB ABCDABCDABDE\n          |\n        ABCDABD\n```\n因为空格与Ｃ不匹配，搜索词还要继续往后移。这时，已匹配的字符数为2（\"AB\"），对应的\"部分匹配值\"为0。所以，移动位数 = 2 - 0，结果为 2，于是将搜索词向后移2位。\n\n9.\n```\nBBC ABCDAB ABCDABCDABDE\n          |\n          ABCDABD\n```\n因为空格与A不匹配，继续后移一位。\n\n10.\n```\nBBC ABCDAB ABCDABCDABDE\n                 |\n           ABCDABD\n```\n逐位比较，直到发现C与D不匹配。于是，移动位数 = 6 - 2，继续将搜索词向后移动4位。\n\n11.\n```\nBBC ABCDAB ABCDABCDABDE\n\n               ABCDABD\n```\n逐位比较，直到搜索词的最后一位，发现完全匹配，于是搜索完成。如果还要继续搜索（即找出全部匹配），移动位数 = 7 - 0，再将搜索词向后移动7位，这里就不再重复了。\n\n##### 部分匹配值\n\n|搜索词     | A | B | C | D | A | B | D |\n|:---------|:-:|:-:|:-:|:-:|:-:|:-:|:-:|\n|部分匹配值 | 0 | 0 | 0 | 0 | 1 | 2 | 0 |\n\n`部分匹配值` 就是 `前缀` 和 `后缀` 的最长的共有元素的长度。以\"ABCDABD\"为例，\n\n```\n\"A\" 的前缀和后缀都为空集，共有元素的长度为0；\n\"AB\" 的前缀为[A]，后缀为[B]，共有元素的长度为0；\n\"ABC\" 的前缀为[A, AB]，后缀为[BC, C]，共有元素的长度0；\n\"ABCD\" 的前缀为[A, AB, ABC]，后缀为[BCD, CD, D]，共有元素的长度为0；\n\"ABCDA\" 的前缀为[A, AB, ABC, ABCD]，后缀为[BCDA, CDA, DA, A]，共有元素为\"A\"，长度为1；\n\"ABCDAB\" 的前缀为[A, AB, ABC, ABCD, ABCDA]，后缀为[BCDAB, CDAB, DAB, AB, B]，共有元素为\"AB\"，长度为2；\n\"ABCDABD\" 的前缀为[A, AB, ABC, ABCD, ABCDA, ABCDAB]，后缀为[BCDABD, CDABD, DABD, ABD, BD, D]，共有元素的长度为0。\n```\n\n##### 代码实现\nLeetcode 28题问题描述:\n\n```\nReturns the index of the first occurrence of needle in haystack, or -1 if needle \nis not part of haystack.\n```\n\n* 部分匹配值的算法实现：\n\n```java\nprivate int[] generateNext(String needle) {\n    int[] next = new int[needle.length()];\n    char[] chs = needle.toCharArray();\n    int i = 0, j = 1;\n    while(j < chs.length) {\n        if(chs[i] == chs[j]) {\n            next[j] = i + 1;\n            i++;\n            j++;\n        } else {\n            if(i == 0) {\n                next[j] = 0;\n                j++;\n            } else {\n                i = next[i - 1];\n            }\n        }\n    }\n    return next;\n}\n```\n给定一个字符串，通过以上代码可以得出该字符串相应的部分匹配值数组 `next`。\n\n* 字符串匹配\n\n```java\npublic int strStr(String haystack, String needle) {\n    if(haystack.length() < needle.length()) return -1;\n    \n    int i = 0, j = 0;\n    int[] next = generateNext(needle);\n    char[] h_chs = haystack.toCharArray(), n_chs = needle.toCharArray();\n    while(i < h_chs.length && j < n_chs.length) {\n        if(h_chs[i] == n_chs[j]) {\n            i++;\n            j++;\n        } else {\n            if(j == 0) {\n                i++;\n            } else {\n                j = next[j - 1];\n            }\n        }\n    }\n    return j == n_chs.length? i - n_chs.length : -1;\n}\n```\n根据之前计算出的部分匹配值数组 `next`，可以通过如上代码计算出匹配字符串 `needle` 在原字符串 `haystack` 中相应的匹配位置。\n\n#### 相关Leetcode题目\n\n[Leetcode: 28. Implement strStr()](https://leetcode.com/problems/implement-strstr/description/)  \n[Leetcode: 459. Repeated Substring Pattern](https://leetcode.com/problems/repeated-substring-pattern/description/)\n\n### 相关参考\n> * [字符串匹配的KMP算法](http://kb.cnblogs.com/page/176818/)\n> ","slug":"kmp-algorithm","published":1,"updated":"2017-08-15T08:03:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj77wke2t0000fiilq7blpxqp","content":"<h3 id=\"字符串匹配\"><a href=\"#字符串匹配\" class=\"headerlink\" title=\"字符串匹配\"></a>字符串匹配</h3><p>字符串匹配是算法题中常考的一个类型，而且通常会在更复杂的题目中和其他类型的问题搭配出现。<br>举例来说，有一个字符串”BBC ABCDAB ABCDABCDABDE”，来检测这其中是否含有另一个字符串”ABCDABD”就是字符串的匹配问题。</p>\n<h4 id=\"Brust-Force\"><a href=\"#Brust-Force\" class=\"headerlink\" title=\"Brust Force\"></a>Brust Force</h4><p><strong>原字符串:</strong>   “BBC ABCDAB ABCDABCDABDE” 长度: m<br><strong>匹配字符串:</strong> “ABCDABD”                 长度: n<br><strong>时间复杂度为:</strong> O(mn)<br>假设原字符串和匹配字符串的长度分别为m和n，暴力解法brust force通常是从第一个字符开始检测，如果遇到不匹配，则将用于匹配的字符向后移动一位，再继续从头开始匹配，直到找到完全匹配的位置或遍历完整个字符串，时间复杂度为mn。</p>\n<a id=\"more\"></a>\n<h4 id=\"KMP\"><a href=\"#KMP\" class=\"headerlink\" title=\"KMP\"></a>KMP</h4><p><strong>原字符串:</strong>   “BBC ABCDAB ABCDABCDABDE” 长度: m<br><strong>匹配字符串:</strong> “ABCDABD”                 长度: n<br><strong>时间复杂度为:</strong> O(m + n)<br>与暴力解法不同，KMP在遇到不匹配的部位时，不是直接向后移动一位，而是根据一个部分匹配值表，来确定移动的位置，具体算法步骤如下:  </p>\n<h5 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h5><p>1.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">BBC ABCDAB ABCDABCDABDE</div><div class=\"line\">|</div><div class=\"line\">ABCDABD</div></pre></td></tr></table></figure></p>\n<p>首先，字符串”BBC ABCDAB ABCDABCDABDE”的第一个字符与搜索词”ABCDABD”的第一个字符，进行比较。因为B与A不匹配，所以搜索词后移一位。  </p>\n<p>2.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">BBC ABCDAB ABCDABCDABDE</div><div class=\"line\"> |</div><div class=\"line\"> ABCDABD</div></pre></td></tr></table></figure></p>\n<p>因为B与A不匹配，搜索词再往后移。</p>\n<p>3.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">BBC ABCDAB ABCDABCDABDE</div><div class=\"line\">    |</div><div class=\"line\">    ABCDABD</div></pre></td></tr></table></figure></p>\n<p>就这样，直到字符串有一个字符，与搜索词的第一个字符相同为止。</p>\n<p>4.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">BBC ABCDAB ABCDABCDABDE</div><div class=\"line\">     |</div><div class=\"line\">    ABCDABD</div></pre></td></tr></table></figure></p>\n<p>接着比较字符串和搜索词的下一个字符，还是相同。</p>\n<p>5.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">BBC ABCDAB ABCDABCDABDE</div><div class=\"line\">          |</div><div class=\"line\">    ABCDABD</div></pre></td></tr></table></figure></p>\n<p>直到字符串有一个字符，与搜索词对应的字符不相同为止。<br>一个基本事实是，当空格与D不匹配时，你其实知道前面六个字符是”ABCDAB”。KMP算法的想法是，设法利用这个已知信息，不要把”搜索位置”移回已经比较过的位置，继续把它向后移，这样就提高了效率。</p>\n<p>6.<br>上诉所说的已知信息指的就是部分匹配值:  </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">搜索词</th>\n<th style=\"text-align:center\">A</th>\n<th style=\"text-align:center\">B</th>\n<th style=\"text-align:center\">C</th>\n<th style=\"text-align:center\">D</th>\n<th style=\"text-align:center\">A</th>\n<th style=\"text-align:center\">B</th>\n<th style=\"text-align:center\">D</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">部分匹配值</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n</tbody>\n</table>\n<p>部分匹配值具体如何计算下面会讲到。</p>\n<p>7.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">BBC ABCDAB ABCDABCDABDE</div><div class=\"line\">          |</div><div class=\"line\">    ABCDABD</div></pre></td></tr></table></figure></p>\n<p>当空格与D不匹配时，查表可以最后一个匹配字符B对应的部分匹配值为2，因此可以按照下面的公式计算出匹配字符串应该向后移动的位数:<br><code>移动位数 = 已匹配字符数 - 对应的部分匹配值</code><br>因此在这个例子里，应该讲匹配字符串向后移动 <code>6 - 2 = 4</code> 位。</p>\n<p>8.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">BBC ABCDAB ABCDABCDABDE</div><div class=\"line\">          |</div><div class=\"line\">        ABCDABD</div></pre></td></tr></table></figure></p>\n<p>因为空格与Ｃ不匹配，搜索词还要继续往后移。这时，已匹配的字符数为2（”AB”），对应的”部分匹配值”为0。所以，移动位数 = 2 - 0，结果为 2，于是将搜索词向后移2位。</p>\n<p>9.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">BBC ABCDAB ABCDABCDABDE</div><div class=\"line\">          |</div><div class=\"line\">          ABCDABD</div></pre></td></tr></table></figure></p>\n<p>因为空格与A不匹配，继续后移一位。</p>\n<p>10.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">BBC ABCDAB ABCDABCDABDE</div><div class=\"line\">                 |</div><div class=\"line\">           ABCDABD</div></pre></td></tr></table></figure></p>\n<p>逐位比较，直到发现C与D不匹配。于是，移动位数 = 6 - 2，继续将搜索词向后移动4位。</p>\n<p>11.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">BBC ABCDAB ABCDABCDABDE</div><div class=\"line\"></div><div class=\"line\">               ABCDABD</div></pre></td></tr></table></figure></p>\n<p>逐位比较，直到搜索词的最后一位，发现完全匹配，于是搜索完成。如果还要继续搜索（即找出全部匹配），移动位数 = 7 - 0，再将搜索词向后移动7位，这里就不再重复了。</p>\n<h5 id=\"部分匹配值\"><a href=\"#部分匹配值\" class=\"headerlink\" title=\"部分匹配值\"></a>部分匹配值</h5><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">搜索词</th>\n<th style=\"text-align:center\">A</th>\n<th style=\"text-align:center\">B</th>\n<th style=\"text-align:center\">C</th>\n<th style=\"text-align:center\">D</th>\n<th style=\"text-align:center\">A</th>\n<th style=\"text-align:center\">B</th>\n<th style=\"text-align:center\">D</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">部分匹配值</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n</tbody>\n</table>\n<p><code>部分匹配值</code> 就是 <code>前缀</code> 和 <code>后缀</code> 的最长的共有元素的长度。以”ABCDABD”为例，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;A&quot; 的前缀和后缀都为空集，共有元素的长度为0；</div><div class=\"line\">&quot;AB&quot; 的前缀为[A]，后缀为[B]，共有元素的长度为0；</div><div class=\"line\">&quot;ABC&quot; 的前缀为[A, AB]，后缀为[BC, C]，共有元素的长度0；</div><div class=\"line\">&quot;ABCD&quot; 的前缀为[A, AB, ABC]，后缀为[BCD, CD, D]，共有元素的长度为0；</div><div class=\"line\">&quot;ABCDA&quot; 的前缀为[A, AB, ABC, ABCD]，后缀为[BCDA, CDA, DA, A]，共有元素为&quot;A&quot;，长度为1；</div><div class=\"line\">&quot;ABCDAB&quot; 的前缀为[A, AB, ABC, ABCD, ABCDA]，后缀为[BCDAB, CDAB, DAB, AB, B]，共有元素为&quot;AB&quot;，长度为2；</div><div class=\"line\">&quot;ABCDABD&quot; 的前缀为[A, AB, ABC, ABCD, ABCDA, ABCDAB]，后缀为[BCDABD, CDABD, DABD, ABD, BD, D]，共有元素的长度为0。</div></pre></td></tr></table></figure>\n<h5 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><p>Leetcode 28题问题描述:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Returns the index of the first occurrence of needle in haystack, or -1 if needle </div><div class=\"line\">is not part of haystack.</div></pre></td></tr></table></figure>\n<ul>\n<li>部分匹配值的算法实现：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] generateNext(String needle) &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span>[] next = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[needle.length()];</div><div class=\"line\">    <span class=\"keyword\">char</span>[] chs = needle.toCharArray();</div><div class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(j &lt; chs.length) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(chs[i] == chs[j]) &#123;</div><div class=\"line\">            next[j] = i + <span class=\"number\">1</span>;</div><div class=\"line\">            i++;</div><div class=\"line\">            j++;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                next[j] = <span class=\"number\">0</span>;</div><div class=\"line\">                j++;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                i = next[i - <span class=\"number\">1</span>];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> next;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>给定一个字符串，通过以上代码可以得出该字符串相应的部分匹配值数组 <code>next</code>。</p>\n<ul>\n<li>字符串匹配</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">strStr</span><span class=\"params\">(String haystack, String needle)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(haystack.length() &lt; needle.length()) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span>[] next = generateNext(needle);</div><div class=\"line\">    <span class=\"keyword\">char</span>[] h_chs = haystack.toCharArray(), n_chs = needle.toCharArray();</div><div class=\"line\">    <span class=\"keyword\">while</span>(i &lt; h_chs.length &amp;&amp; j &lt; n_chs.length) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(h_chs[i] == n_chs[j]) &#123;</div><div class=\"line\">            i++;</div><div class=\"line\">            j++;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(j == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                i++;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                j = next[j - <span class=\"number\">1</span>];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> j == n_chs.length? i - n_chs.length : -<span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>根据之前计算出的部分匹配值数组 <code>next</code>，可以通过如上代码计算出匹配字符串 <code>needle</code> 在原字符串 <code>haystack</code> 中相应的匹配位置。</p>\n<h4 id=\"相关Leetcode题目\"><a href=\"#相关Leetcode题目\" class=\"headerlink\" title=\"相关Leetcode题目\"></a>相关Leetcode题目</h4><p><a href=\"https://leetcode.com/problems/implement-strstr/description/\" target=\"_blank\" rel=\"external\">Leetcode: 28. Implement strStr()</a><br><a href=\"https://leetcode.com/problems/repeated-substring-pattern/description/\" target=\"_blank\" rel=\"external\">Leetcode: 459. Repeated Substring Pattern</a></p>\n<h3 id=\"相关参考\"><a href=\"#相关参考\" class=\"headerlink\" title=\"相关参考\"></a>相关参考</h3><blockquote>\n<ul>\n<li><a href=\"http://kb.cnblogs.com/page/176818/\" target=\"_blank\" rel=\"external\">字符串匹配的KMP算法</a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"字符串匹配\"><a href=\"#字符串匹配\" class=\"headerlink\" title=\"字符串匹配\"></a>字符串匹配</h3><p>字符串匹配是算法题中常考的一个类型，而且通常会在更复杂的题目中和其他类型的问题搭配出现。<br>举例来说，有一个字符串”BBC ABCDAB ABCDABCDABDE”，来检测这其中是否含有另一个字符串”ABCDABD”就是字符串的匹配问题。</p>\n<h4 id=\"Brust-Force\"><a href=\"#Brust-Force\" class=\"headerlink\" title=\"Brust Force\"></a>Brust Force</h4><p><strong>原字符串:</strong>   “BBC ABCDAB ABCDABCDABDE” 长度: m<br><strong>匹配字符串:</strong> “ABCDABD”                 长度: n<br><strong>时间复杂度为:</strong> O(mn)<br>假设原字符串和匹配字符串的长度分别为m和n，暴力解法brust force通常是从第一个字符开始检测，如果遇到不匹配，则将用于匹配的字符向后移动一位，再继续从头开始匹配，直到找到完全匹配的位置或遍历完整个字符串，时间复杂度为mn。</p>","more":"<h4 id=\"KMP\"><a href=\"#KMP\" class=\"headerlink\" title=\"KMP\"></a>KMP</h4><p><strong>原字符串:</strong>   “BBC ABCDAB ABCDABCDABDE” 长度: m<br><strong>匹配字符串:</strong> “ABCDABD”                 长度: n<br><strong>时间复杂度为:</strong> O(m + n)<br>与暴力解法不同，KMP在遇到不匹配的部位时，不是直接向后移动一位，而是根据一个部分匹配值表，来确定移动的位置，具体算法步骤如下:  </p>\n<h5 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h5><p>1.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">BBC ABCDAB ABCDABCDABDE</div><div class=\"line\">|</div><div class=\"line\">ABCDABD</div></pre></td></tr></table></figure></p>\n<p>首先，字符串”BBC ABCDAB ABCDABCDABDE”的第一个字符与搜索词”ABCDABD”的第一个字符，进行比较。因为B与A不匹配，所以搜索词后移一位。  </p>\n<p>2.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">BBC ABCDAB ABCDABCDABDE</div><div class=\"line\"> |</div><div class=\"line\"> ABCDABD</div></pre></td></tr></table></figure></p>\n<p>因为B与A不匹配，搜索词再往后移。</p>\n<p>3.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">BBC ABCDAB ABCDABCDABDE</div><div class=\"line\">    |</div><div class=\"line\">    ABCDABD</div></pre></td></tr></table></figure></p>\n<p>就这样，直到字符串有一个字符，与搜索词的第一个字符相同为止。</p>\n<p>4.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">BBC ABCDAB ABCDABCDABDE</div><div class=\"line\">     |</div><div class=\"line\">    ABCDABD</div></pre></td></tr></table></figure></p>\n<p>接着比较字符串和搜索词的下一个字符，还是相同。</p>\n<p>5.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">BBC ABCDAB ABCDABCDABDE</div><div class=\"line\">          |</div><div class=\"line\">    ABCDABD</div></pre></td></tr></table></figure></p>\n<p>直到字符串有一个字符，与搜索词对应的字符不相同为止。<br>一个基本事实是，当空格与D不匹配时，你其实知道前面六个字符是”ABCDAB”。KMP算法的想法是，设法利用这个已知信息，不要把”搜索位置”移回已经比较过的位置，继续把它向后移，这样就提高了效率。</p>\n<p>6.<br>上诉所说的已知信息指的就是部分匹配值:  </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">搜索词</th>\n<th style=\"text-align:center\">A</th>\n<th style=\"text-align:center\">B</th>\n<th style=\"text-align:center\">C</th>\n<th style=\"text-align:center\">D</th>\n<th style=\"text-align:center\">A</th>\n<th style=\"text-align:center\">B</th>\n<th style=\"text-align:center\">D</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">部分匹配值</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n</tbody>\n</table>\n<p>部分匹配值具体如何计算下面会讲到。</p>\n<p>7.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">BBC ABCDAB ABCDABCDABDE</div><div class=\"line\">          |</div><div class=\"line\">    ABCDABD</div></pre></td></tr></table></figure></p>\n<p>当空格与D不匹配时，查表可以最后一个匹配字符B对应的部分匹配值为2，因此可以按照下面的公式计算出匹配字符串应该向后移动的位数:<br><code>移动位数 = 已匹配字符数 - 对应的部分匹配值</code><br>因此在这个例子里，应该讲匹配字符串向后移动 <code>6 - 2 = 4</code> 位。</p>\n<p>8.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">BBC ABCDAB ABCDABCDABDE</div><div class=\"line\">          |</div><div class=\"line\">        ABCDABD</div></pre></td></tr></table></figure></p>\n<p>因为空格与Ｃ不匹配，搜索词还要继续往后移。这时，已匹配的字符数为2（”AB”），对应的”部分匹配值”为0。所以，移动位数 = 2 - 0，结果为 2，于是将搜索词向后移2位。</p>\n<p>9.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">BBC ABCDAB ABCDABCDABDE</div><div class=\"line\">          |</div><div class=\"line\">          ABCDABD</div></pre></td></tr></table></figure></p>\n<p>因为空格与A不匹配，继续后移一位。</p>\n<p>10.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">BBC ABCDAB ABCDABCDABDE</div><div class=\"line\">                 |</div><div class=\"line\">           ABCDABD</div></pre></td></tr></table></figure></p>\n<p>逐位比较，直到发现C与D不匹配。于是，移动位数 = 6 - 2，继续将搜索词向后移动4位。</p>\n<p>11.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">BBC ABCDAB ABCDABCDABDE</div><div class=\"line\"></div><div class=\"line\">               ABCDABD</div></pre></td></tr></table></figure></p>\n<p>逐位比较，直到搜索词的最后一位，发现完全匹配，于是搜索完成。如果还要继续搜索（即找出全部匹配），移动位数 = 7 - 0，再将搜索词向后移动7位，这里就不再重复了。</p>\n<h5 id=\"部分匹配值\"><a href=\"#部分匹配值\" class=\"headerlink\" title=\"部分匹配值\"></a>部分匹配值</h5><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">搜索词</th>\n<th style=\"text-align:center\">A</th>\n<th style=\"text-align:center\">B</th>\n<th style=\"text-align:center\">C</th>\n<th style=\"text-align:center\">D</th>\n<th style=\"text-align:center\">A</th>\n<th style=\"text-align:center\">B</th>\n<th style=\"text-align:center\">D</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">部分匹配值</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n</tbody>\n</table>\n<p><code>部分匹配值</code> 就是 <code>前缀</code> 和 <code>后缀</code> 的最长的共有元素的长度。以”ABCDABD”为例，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;A&quot; 的前缀和后缀都为空集，共有元素的长度为0；</div><div class=\"line\">&quot;AB&quot; 的前缀为[A]，后缀为[B]，共有元素的长度为0；</div><div class=\"line\">&quot;ABC&quot; 的前缀为[A, AB]，后缀为[BC, C]，共有元素的长度0；</div><div class=\"line\">&quot;ABCD&quot; 的前缀为[A, AB, ABC]，后缀为[BCD, CD, D]，共有元素的长度为0；</div><div class=\"line\">&quot;ABCDA&quot; 的前缀为[A, AB, ABC, ABCD]，后缀为[BCDA, CDA, DA, A]，共有元素为&quot;A&quot;，长度为1；</div><div class=\"line\">&quot;ABCDAB&quot; 的前缀为[A, AB, ABC, ABCD, ABCDA]，后缀为[BCDAB, CDAB, DAB, AB, B]，共有元素为&quot;AB&quot;，长度为2；</div><div class=\"line\">&quot;ABCDABD&quot; 的前缀为[A, AB, ABC, ABCD, ABCDA, ABCDAB]，后缀为[BCDABD, CDABD, DABD, ABD, BD, D]，共有元素的长度为0。</div></pre></td></tr></table></figure>\n<h5 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><p>Leetcode 28题问题描述:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Returns the index of the first occurrence of needle in haystack, or -1 if needle </div><div class=\"line\">is not part of haystack.</div></pre></td></tr></table></figure>\n<ul>\n<li>部分匹配值的算法实现：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] generateNext(String needle) &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span>[] next = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[needle.length()];</div><div class=\"line\">    <span class=\"keyword\">char</span>[] chs = needle.toCharArray();</div><div class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(j &lt; chs.length) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(chs[i] == chs[j]) &#123;</div><div class=\"line\">            next[j] = i + <span class=\"number\">1</span>;</div><div class=\"line\">            i++;</div><div class=\"line\">            j++;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                next[j] = <span class=\"number\">0</span>;</div><div class=\"line\">                j++;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                i = next[i - <span class=\"number\">1</span>];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> next;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>给定一个字符串，通过以上代码可以得出该字符串相应的部分匹配值数组 <code>next</code>。</p>\n<ul>\n<li>字符串匹配</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">strStr</span><span class=\"params\">(String haystack, String needle)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(haystack.length() &lt; needle.length()) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span>[] next = generateNext(needle);</div><div class=\"line\">    <span class=\"keyword\">char</span>[] h_chs = haystack.toCharArray(), n_chs = needle.toCharArray();</div><div class=\"line\">    <span class=\"keyword\">while</span>(i &lt; h_chs.length &amp;&amp; j &lt; n_chs.length) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(h_chs[i] == n_chs[j]) &#123;</div><div class=\"line\">            i++;</div><div class=\"line\">            j++;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(j == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                i++;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                j = next[j - <span class=\"number\">1</span>];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> j == n_chs.length? i - n_chs.length : -<span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>根据之前计算出的部分匹配值数组 <code>next</code>，可以通过如上代码计算出匹配字符串 <code>needle</code> 在原字符串 <code>haystack</code> 中相应的匹配位置。</p>\n<h4 id=\"相关Leetcode题目\"><a href=\"#相关Leetcode题目\" class=\"headerlink\" title=\"相关Leetcode题目\"></a>相关Leetcode题目</h4><p><a href=\"https://leetcode.com/problems/implement-strstr/description/\" target=\"_blank\" rel=\"external\">Leetcode: 28. Implement strStr()</a><br><a href=\"https://leetcode.com/problems/repeated-substring-pattern/description/\" target=\"_blank\" rel=\"external\">Leetcode: 459. Repeated Substring Pattern</a></p>\n<h3 id=\"相关参考\"><a href=\"#相关参考\" class=\"headerlink\" title=\"相关参考\"></a>相关参考</h3><blockquote>\n<ul>\n<li><a href=\"http://kb.cnblogs.com/page/176818/\" target=\"_blank\" rel=\"external\">字符串匹配的KMP算法</a></li>\n</ul>\n</blockquote>"},{"title":"Hello World","date":"2017-07-24T03:19:22.000Z","_content":"\n## 程序员的开场白\n\n``` python\ndef start():\n    print('Hello World')\n\nif __name__ == '__main__':\n    start()\n```\n\n我的个人博客上线了，主要用于记录自己时不时的一些小想法和学习技术中遇到的一些问题.","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2017-07-23 20:19:22\ntags: 随笔\ncategories: 生活\n---\n\n## 程序员的开场白\n\n``` python\ndef start():\n    print('Hello World')\n\nif __name__ == '__main__':\n    start()\n```\n\n我的个人博客上线了，主要用于记录自己时不时的一些小想法和学习技术中遇到的一些问题.","slug":"hello-world","published":1,"updated":"2017-07-23T12:24:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj77wke310002fiil0bq42phj","content":"<h2 id=\"程序员的开场白\"><a href=\"#程序员的开场白\" class=\"headerlink\" title=\"程序员的开场白\"></a>程序员的开场白</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'Hello World'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    start()</div></pre></td></tr></table></figure>\n<p>我的个人博客上线了，主要用于记录自己时不时的一些小想法和学习技术中遇到的一些问题.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"程序员的开场白\"><a href=\"#程序员的开场白\" class=\"headerlink\" title=\"程序员的开场白\"></a>程序员的开场白</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'Hello World'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    start()</div></pre></td></tr></table></figure>\n<p>我的个人博客上线了，主要用于记录自己时不时的一些小想法和学习技术中遇到的一些问题.</p>\n"},{"title":"Markdown语法小记","date":"2017-07-25T22:49:05.000Z","_content":"\n在真正写博客之前虽有对Markdown有所了解，但是从来没有仔细学习过它的各种语法，仔细想想刚开始部署GitHub的时候，还对readme的md后缀懵逼过，十分的惭愧，所以现在准备好好记录一下.\n\n## 基础语法\n### 文字标题\n\nMarkdonw中有两种定义标题的方式，第一种是利用 `=` (最高阶标题) 和`-` (第二阶标题)在文字下方加入底线的形式，第二种是在行首加入1到6个 `#`，对应标题从第一阶到第六阶.\n\n<!--more -->\n\n#### 加底线的标题\n\n最高阶标题\n\n```\n这是最高阶标题\t\n============\n```\n第二阶标题\n\n```\n这是第二阶标题\n------------\n```\n\n#### 加 `#` 的标题\n\n```\n# 这是一阶标题\n\n###### 这是六阶标题\n```\n\n### 换行与分割线\n\n#### 换行\n\n刚开始使用Markdown时，很多小伙伴可能会对换行有一些迷惑(其实就是我自己)，每次都要在两行之间空一行，但其实Markdown的换行只需要在上一行的末尾加上两个空格，再回车，就能够换行了.  \n\n#### 分隔线\nMarkdown中可以使用 `***` 或者 `---`来产生分隔线，效果如下:\n***\n注意，因为 `---` 也可以用来产生二级标题，所以，用 `---` 产生分隔线时，需要与上一行文字隔一行.\n\n### 加粗与斜体\n\nMarkdown中实现文字的加粗与斜体也是非常的简单，用两个 `*` 包裹文字就能实现**加粗**，用一个 `*` 包裹文字，就能实现*斜体*.\n\n```\n**这里会加粗**\n\n*这里会斜体*\n```\n\n### 列表\n\nMarkdown中无序列表可以通过在文字前加上 `*` `-` 或 `+` 中任意一个和空格实现，在文字前加上数字，点和空格(例如`1. `)就能实现有序列表.\n\n```\n* 无序列表1\n- 无序列表2\n+ 无序列表3\n\n1. 有序列表1\n2. 有序列表2\n```\n\n### 图片与链接\n\n都需要加入URL的图片和链接在Markdown中的实现方式比较类似:\n\n#### 图片:\n\n```\n![Alt text](/path/to/img.jpg)\nor\n![Alt text](/path/to/img.jpg \"Optional title\")\n```\n\n方括号 `[]` 中为图片加载不出来时的替代文字，`()` 中第一项为图片的地址，第二项可选择性的加或者不加，其内容是图片的title.\n\n#### 链接:\n\n```\n[text](/path/to/page)\n```\n`[]` 中放入链接文字，`()`中则为具体的url.\n\n### 表格\n\n表格的格式如下:\n\n```\n| col1       | col2       | col3       |\n| :--------- |:----------:| ----------:|\n| row1 col1  | row1 col2  | row1 col3  |\n| row2 col1  | row2 col2  | row2 col3  |\n| row3 col1  | row3 col2  | row3 col3  |\n```\n效果则为:\n\n| col1       | col2       | col3       |\n| :--------- |:----------:| ----------:|\n| row1 col1  | row1 col2  | row1 col3  |\n| row2 col1  | row2 col2  | row2 col3  |\n| row3 col1  | row3 col2  | row3 col3  |\n\n### 引用\n在文字前加上 `>` 即可加入一段引用\n\n>这是一段引用  \n\n如果需要加入很多行引用，则需要在每行前都加上 `>`\n\n>这是  \n>多行  \n>引用\n\n### 代码块\n\n对于程序员来说，如何优雅在文本中加入代码块是一件很重(zhuang)要(B)的事情，在Markdown中加入代码块有多种方式:  \n\n- 缩进4个空格或者1个制表符(tab键)  \n\n```\n\t前面加四个空格或者一个tab就可以形成代码块\n```\n在列表行下使用此种方法时则需要缩进两次，所以为了使用方便和文字的区域性更加明显，不是很推荐这种方法来产生代码块.\n\n- 单行的代码用两个 `` ` `` 符号包裹\n\n```\n`被包裹的单行代码块`\n```\n\n- 多行的代码则用分别用三个 `` ` `` 将整段代码包裹，同时用此种方法加上不同的语言名字还可以为不同的程序语言设置不同的代码高亮，完美的解决了程序员的这一刚性需求\n\t\n``` python\n\\``` python\ndef function():\n\tprint('这里是多行代码')\n\\```   \n```\n(因为是特殊符号，所以在展示时加入了一个 \\ 取消符号的特殊含义方便展示，在实际使用时无需加上反斜杠)\n\n\n## 其他语法\n\n### 兼容HTML\n在Markdown中可以使用HTML的标签元素来对文字进行进一步的修改，例如Markdown中的文字大小一般是无法进行直接修改的，通过HTML标签或者直接修改CSS文件就可以做到修改Markdown文件中文字的大小颜色等属性.\n\n<span style=\"font-size: 20px;color: red\">我变大了也变红了</span>\n\n代码如下:\n\n``` html\n<span style=\"font-size: 20px;color: red\">我变大了也变红了</span>\n```\n\n但是这些修改违背了Markdown让文档更容易读，写和改的意愿，所以一般不建议如此书写.\n\n### 特殊字符自动转换\n在 HTML 文件中，有两个字符需要特殊处理: < 和 & . < 符号用于起始标签，& 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 &lt; 和 &amp;.\n\n& 字符尤其让网络文档编写者受折磨，如果你要打「AT&T」 ，你必须要写成「AT&amp;T」。而网址中的 & 字符也要转换。比如你要链接到：\n\n```\nhttp://images.google.com/images?num=30&q=larry+bird\n```\n你必须要把网址转换写为：\n\n```\nhttp://images.google.com/images?num=30&amp;q=larry+bird\n```\n才能放到链接标签的 href 属性里.\n\n### 反斜杠取消符号特殊含义\nMarkdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如: `\\*我不会变斜\\*`\n\n\n## 参考资料\n>- [Markdown——入门指南](http://www.jianshu.com/p/1e402922ee32)\n>- [Markdown 语法说明](http://wowubuntu.com/markdown/index.html#backslash)\n\n\n\n\n","source":"_posts/markdown-record.md","raw":"---\ntitle: Markdown语法小记\ndate: 2017-07-25 15:49:05\ntags: markdown\ncategories: 技术\n---\n\n在真正写博客之前虽有对Markdown有所了解，但是从来没有仔细学习过它的各种语法，仔细想想刚开始部署GitHub的时候，还对readme的md后缀懵逼过，十分的惭愧，所以现在准备好好记录一下.\n\n## 基础语法\n### 文字标题\n\nMarkdonw中有两种定义标题的方式，第一种是利用 `=` (最高阶标题) 和`-` (第二阶标题)在文字下方加入底线的形式，第二种是在行首加入1到6个 `#`，对应标题从第一阶到第六阶.\n\n<!--more -->\n\n#### 加底线的标题\n\n最高阶标题\n\n```\n这是最高阶标题\t\n============\n```\n第二阶标题\n\n```\n这是第二阶标题\n------------\n```\n\n#### 加 `#` 的标题\n\n```\n# 这是一阶标题\n\n###### 这是六阶标题\n```\n\n### 换行与分割线\n\n#### 换行\n\n刚开始使用Markdown时，很多小伙伴可能会对换行有一些迷惑(其实就是我自己)，每次都要在两行之间空一行，但其实Markdown的换行只需要在上一行的末尾加上两个空格，再回车，就能够换行了.  \n\n#### 分隔线\nMarkdown中可以使用 `***` 或者 `---`来产生分隔线，效果如下:\n***\n注意，因为 `---` 也可以用来产生二级标题，所以，用 `---` 产生分隔线时，需要与上一行文字隔一行.\n\n### 加粗与斜体\n\nMarkdown中实现文字的加粗与斜体也是非常的简单，用两个 `*` 包裹文字就能实现**加粗**，用一个 `*` 包裹文字，就能实现*斜体*.\n\n```\n**这里会加粗**\n\n*这里会斜体*\n```\n\n### 列表\n\nMarkdown中无序列表可以通过在文字前加上 `*` `-` 或 `+` 中任意一个和空格实现，在文字前加上数字，点和空格(例如`1. `)就能实现有序列表.\n\n```\n* 无序列表1\n- 无序列表2\n+ 无序列表3\n\n1. 有序列表1\n2. 有序列表2\n```\n\n### 图片与链接\n\n都需要加入URL的图片和链接在Markdown中的实现方式比较类似:\n\n#### 图片:\n\n```\n![Alt text](/path/to/img.jpg)\nor\n![Alt text](/path/to/img.jpg \"Optional title\")\n```\n\n方括号 `[]` 中为图片加载不出来时的替代文字，`()` 中第一项为图片的地址，第二项可选择性的加或者不加，其内容是图片的title.\n\n#### 链接:\n\n```\n[text](/path/to/page)\n```\n`[]` 中放入链接文字，`()`中则为具体的url.\n\n### 表格\n\n表格的格式如下:\n\n```\n| col1       | col2       | col3       |\n| :--------- |:----------:| ----------:|\n| row1 col1  | row1 col2  | row1 col3  |\n| row2 col1  | row2 col2  | row2 col3  |\n| row3 col1  | row3 col2  | row3 col3  |\n```\n效果则为:\n\n| col1       | col2       | col3       |\n| :--------- |:----------:| ----------:|\n| row1 col1  | row1 col2  | row1 col3  |\n| row2 col1  | row2 col2  | row2 col3  |\n| row3 col1  | row3 col2  | row3 col3  |\n\n### 引用\n在文字前加上 `>` 即可加入一段引用\n\n>这是一段引用  \n\n如果需要加入很多行引用，则需要在每行前都加上 `>`\n\n>这是  \n>多行  \n>引用\n\n### 代码块\n\n对于程序员来说，如何优雅在文本中加入代码块是一件很重(zhuang)要(B)的事情，在Markdown中加入代码块有多种方式:  \n\n- 缩进4个空格或者1个制表符(tab键)  \n\n```\n\t前面加四个空格或者一个tab就可以形成代码块\n```\n在列表行下使用此种方法时则需要缩进两次，所以为了使用方便和文字的区域性更加明显，不是很推荐这种方法来产生代码块.\n\n- 单行的代码用两个 `` ` `` 符号包裹\n\n```\n`被包裹的单行代码块`\n```\n\n- 多行的代码则用分别用三个 `` ` `` 将整段代码包裹，同时用此种方法加上不同的语言名字还可以为不同的程序语言设置不同的代码高亮，完美的解决了程序员的这一刚性需求\n\t\n``` python\n\\``` python\ndef function():\n\tprint('这里是多行代码')\n\\```   \n```\n(因为是特殊符号，所以在展示时加入了一个 \\ 取消符号的特殊含义方便展示，在实际使用时无需加上反斜杠)\n\n\n## 其他语法\n\n### 兼容HTML\n在Markdown中可以使用HTML的标签元素来对文字进行进一步的修改，例如Markdown中的文字大小一般是无法进行直接修改的，通过HTML标签或者直接修改CSS文件就可以做到修改Markdown文件中文字的大小颜色等属性.\n\n<span style=\"font-size: 20px;color: red\">我变大了也变红了</span>\n\n代码如下:\n\n``` html\n<span style=\"font-size: 20px;color: red\">我变大了也变红了</span>\n```\n\n但是这些修改违背了Markdown让文档更容易读，写和改的意愿，所以一般不建议如此书写.\n\n### 特殊字符自动转换\n在 HTML 文件中，有两个字符需要特殊处理: < 和 & . < 符号用于起始标签，& 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 &lt; 和 &amp;.\n\n& 字符尤其让网络文档编写者受折磨，如果你要打「AT&T」 ，你必须要写成「AT&amp;T」。而网址中的 & 字符也要转换。比如你要链接到：\n\n```\nhttp://images.google.com/images?num=30&q=larry+bird\n```\n你必须要把网址转换写为：\n\n```\nhttp://images.google.com/images?num=30&amp;q=larry+bird\n```\n才能放到链接标签的 href 属性里.\n\n### 反斜杠取消符号特殊含义\nMarkdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如: `\\*我不会变斜\\*`\n\n\n## 参考资料\n>- [Markdown——入门指南](http://www.jianshu.com/p/1e402922ee32)\n>- [Markdown 语法说明](http://wowubuntu.com/markdown/index.html#backslash)\n\n\n\n\n","slug":"markdown-record","published":1,"updated":"2017-07-25T13:49:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj77wke370006fiilw46k8h07","content":"<p>在真正写博客之前虽有对Markdown有所了解，但是从来没有仔细学习过它的各种语法，仔细想想刚开始部署GitHub的时候，还对readme的md后缀懵逼过，十分的惭愧，所以现在准备好好记录一下.</p>\n<h2 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h2><h3 id=\"文字标题\"><a href=\"#文字标题\" class=\"headerlink\" title=\"文字标题\"></a>文字标题</h3><p>Markdonw中有两种定义标题的方式，第一种是利用 <code>=</code> (最高阶标题) 和<code>-</code> (第二阶标题)在文字下方加入底线的形式，第二种是在行首加入1到6个 <code>#</code>，对应标题从第一阶到第六阶.</p>\n<a id=\"more\"></a>\n<h4 id=\"加底线的标题\"><a href=\"#加底线的标题\" class=\"headerlink\" title=\"加底线的标题\"></a>加底线的标题</h4><p>最高阶标题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">这是最高阶标题\t</div><div class=\"line\">============</div></pre></td></tr></table></figure>\n<p>第二阶标题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">这是第二阶标题</div><div class=\"line\">------------</div></pre></td></tr></table></figure>\n<h4 id=\"加-的标题\"><a href=\"#加-的标题\" class=\"headerlink\" title=\"加 # 的标题\"></a>加 <code>#</code> 的标题</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 这是一阶标题</div><div class=\"line\"></div><div class=\"line\">###### 这是六阶标题</div></pre></td></tr></table></figure>\n<h3 id=\"换行与分割线\"><a href=\"#换行与分割线\" class=\"headerlink\" title=\"换行与分割线\"></a>换行与分割线</h3><h4 id=\"换行\"><a href=\"#换行\" class=\"headerlink\" title=\"换行\"></a>换行</h4><p>刚开始使用Markdown时，很多小伙伴可能会对换行有一些迷惑(其实就是我自己)，每次都要在两行之间空一行，但其实Markdown的换行只需要在上一行的末尾加上两个空格，再回车，就能够换行了.  </p>\n<h4 id=\"分隔线\"><a href=\"#分隔线\" class=\"headerlink\" title=\"分隔线\"></a>分隔线</h4><p>Markdown中可以使用 <code>***</code> 或者 <code>---</code>来产生分隔线，效果如下:</p>\n<hr>\n<p>注意，因为 <code>---</code> 也可以用来产生二级标题，所以，用 <code>---</code> 产生分隔线时，需要与上一行文字隔一行.</p>\n<h3 id=\"加粗与斜体\"><a href=\"#加粗与斜体\" class=\"headerlink\" title=\"加粗与斜体\"></a>加粗与斜体</h3><p>Markdown中实现文字的加粗与斜体也是非常的简单，用两个 <code>*</code> 包裹文字就能实现<strong>加粗</strong>，用一个 <code>*</code> 包裹文字，就能实现<em>斜体</em>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">**这里会加粗**</div><div class=\"line\"></div><div class=\"line\">*这里会斜体*</div></pre></td></tr></table></figure>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p>Markdown中无序列表可以通过在文字前加上 <code>*</code> <code>-</code> 或 <code>+</code> 中任意一个和空格实现，在文字前加上数字，点和空格(例如<code>1.</code>)就能实现有序列表.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">* 无序列表1</div><div class=\"line\">- 无序列表2</div><div class=\"line\">+ 无序列表3</div><div class=\"line\"></div><div class=\"line\">1. 有序列表1</div><div class=\"line\">2. 有序列表2</div></pre></td></tr></table></figure>\n<h3 id=\"图片与链接\"><a href=\"#图片与链接\" class=\"headerlink\" title=\"图片与链接\"></a>图片与链接</h3><p>都需要加入URL的图片和链接在Markdown中的实现方式比较类似:</p>\n<h4 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片:\"></a>图片:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">![Alt text](/path/to/img.jpg)</div><div class=\"line\">or</div><div class=\"line\">![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</div></pre></td></tr></table></figure>\n<p>方括号 <code>[]</code> 中为图片加载不出来时的替代文字，<code>()</code> 中第一项为图片的地址，第二项可选择性的加或者不加，其内容是图片的title.</p>\n<h4 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接:\"></a>链接:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[text](/path/to/page)</div></pre></td></tr></table></figure>\n<p><code>[]</code> 中放入链接文字，<code>()</code>中则为具体的url.</p>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><p>表格的格式如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">| col1       | col2       | col3       |</div><div class=\"line\">| :--------- |:----------:| ----------:|</div><div class=\"line\">| row1 col1  | row1 col2  | row1 col3  |</div><div class=\"line\">| row2 col1  | row2 col2  | row2 col3  |</div><div class=\"line\">| row3 col1  | row3 col2  | row3 col3  |</div></pre></td></tr></table></figure>\n<p>效果则为:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">col1</th>\n<th style=\"text-align:center\">col2</th>\n<th style=\"text-align:right\">col3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">row1 col1</td>\n<td style=\"text-align:center\">row1 col2</td>\n<td style=\"text-align:right\">row1 col3</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">row2 col1</td>\n<td style=\"text-align:center\">row2 col2</td>\n<td style=\"text-align:right\">row2 col3</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">row3 col1</td>\n<td style=\"text-align:center\">row3 col2</td>\n<td style=\"text-align:right\">row3 col3</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p>在文字前加上 <code>&gt;</code> 即可加入一段引用</p>\n<blockquote>\n<p>这是一段引用  </p>\n</blockquote>\n<p>如果需要加入很多行引用，则需要在每行前都加上 <code>&gt;</code></p>\n<blockquote>\n<p>这是<br>多行<br>引用</p>\n</blockquote>\n<h3 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h3><p>对于程序员来说，如何优雅在文本中加入代码块是一件很重(zhuang)要(B)的事情，在Markdown中加入代码块有多种方式:  </p>\n<ul>\n<li>缩进4个空格或者1个制表符(tab键)  </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">前面加四个空格或者一个tab就可以形成代码块</div></pre></td></tr></table></figure>\n<p>在列表行下使用此种方法时则需要缩进两次，所以为了使用方便和文字的区域性更加明显，不是很推荐这种方法来产生代码块.</p>\n<ul>\n<li>单行的代码用两个 <code>` </code> 符号包裹</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">`被包裹的单行代码块`</div></pre></td></tr></table></figure>\n<ul>\n<li>多行的代码则用分别用三个 <code>` </code> 将整段代码包裹，同时用此种方法加上不同的语言名字还可以为不同的程序语言设置不同的代码高亮，完美的解决了程序员的这一刚性需求</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">\\``` python</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\tprint(<span class=\"string\">'这里是多行代码'</span>)</div><div class=\"line\">\\```</div></pre></td></tr></table></figure>\n<p>(因为是特殊符号，所以在展示时加入了一个 \\ 取消符号的特殊含义方便展示，在实际使用时无需加上反斜杠)</p>\n<h2 id=\"其他语法\"><a href=\"#其他语法\" class=\"headerlink\" title=\"其他语法\"></a>其他语法</h2><h3 id=\"兼容HTML\"><a href=\"#兼容HTML\" class=\"headerlink\" title=\"兼容HTML\"></a>兼容HTML</h3><p>在Markdown中可以使用HTML的标签元素来对文字进行进一步的修改，例如Markdown中的文字大小一般是无法进行直接修改的，通过HTML标签或者直接修改CSS文件就可以做到修改Markdown文件中文字的大小颜色等属性.</p>\n<p><span style=\"font-size: 20px;color: red\">我变大了也变红了</span></p>\n<p>代码如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size: 20px;color: red\"</span>&gt;</span>我变大了也变红了<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>但是这些修改违背了Markdown让文档更容易读，写和改的意愿，所以一般不建议如此书写.</p>\n<h3 id=\"特殊字符自动转换\"><a href=\"#特殊字符自动转换\" class=\"headerlink\" title=\"特殊字符自动转换\"></a>特殊字符自动转换</h3><p>在 HTML 文件中，有两个字符需要特殊处理: &lt; 和 &amp; . &lt; 符号用于起始标签，&amp; 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 &lt; 和 &amp;.</p>\n<p>&amp; 字符尤其让网络文档编写者受折磨，如果你要打「AT&amp;T」 ，你必须要写成「AT&amp;T」。而网址中的 &amp; 字符也要转换。比如你要链接到：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://images.google.com/images?num=30&amp;q=larry+bird</div></pre></td></tr></table></figure>\n<p>你必须要把网址转换写为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://images.google.com/images?num=30&amp;amp;q=larry+bird</div></pre></td></tr></table></figure>\n<p>才能放到链接标签的 href 属性里.</p>\n<h3 id=\"反斜杠取消符号特殊含义\"><a href=\"#反斜杠取消符号特殊含义\" class=\"headerlink\" title=\"反斜杠取消符号特殊含义\"></a>反斜杠取消符号特殊含义</h3><p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如: <code>\\*我不会变斜\\*</code></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href=\"http://www.jianshu.com/p/1e402922ee32\" target=\"_blank\" rel=\"external\">Markdown——入门指南</a></li>\n<li><a href=\"http://wowubuntu.com/markdown/index.html#backslash\" target=\"_blank\" rel=\"external\">Markdown 语法说明</a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>在真正写博客之前虽有对Markdown有所了解，但是从来没有仔细学习过它的各种语法，仔细想想刚开始部署GitHub的时候，还对readme的md后缀懵逼过，十分的惭愧，所以现在准备好好记录一下.</p>\n<h2 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h2><h3 id=\"文字标题\"><a href=\"#文字标题\" class=\"headerlink\" title=\"文字标题\"></a>文字标题</h3><p>Markdonw中有两种定义标题的方式，第一种是利用 <code>=</code> (最高阶标题) 和<code>-</code> (第二阶标题)在文字下方加入底线的形式，第二种是在行首加入1到6个 <code>#</code>，对应标题从第一阶到第六阶.</p>","more":"<h4 id=\"加底线的标题\"><a href=\"#加底线的标题\" class=\"headerlink\" title=\"加底线的标题\"></a>加底线的标题</h4><p>最高阶标题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">这是最高阶标题\t</div><div class=\"line\">============</div></pre></td></tr></table></figure>\n<p>第二阶标题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">这是第二阶标题</div><div class=\"line\">------------</div></pre></td></tr></table></figure>\n<h4 id=\"加-的标题\"><a href=\"#加-的标题\" class=\"headerlink\" title=\"加 # 的标题\"></a>加 <code>#</code> 的标题</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 这是一阶标题</div><div class=\"line\"></div><div class=\"line\">###### 这是六阶标题</div></pre></td></tr></table></figure>\n<h3 id=\"换行与分割线\"><a href=\"#换行与分割线\" class=\"headerlink\" title=\"换行与分割线\"></a>换行与分割线</h3><h4 id=\"换行\"><a href=\"#换行\" class=\"headerlink\" title=\"换行\"></a>换行</h4><p>刚开始使用Markdown时，很多小伙伴可能会对换行有一些迷惑(其实就是我自己)，每次都要在两行之间空一行，但其实Markdown的换行只需要在上一行的末尾加上两个空格，再回车，就能够换行了.  </p>\n<h4 id=\"分隔线\"><a href=\"#分隔线\" class=\"headerlink\" title=\"分隔线\"></a>分隔线</h4><p>Markdown中可以使用 <code>***</code> 或者 <code>---</code>来产生分隔线，效果如下:</p>\n<hr>\n<p>注意，因为 <code>---</code> 也可以用来产生二级标题，所以，用 <code>---</code> 产生分隔线时，需要与上一行文字隔一行.</p>\n<h3 id=\"加粗与斜体\"><a href=\"#加粗与斜体\" class=\"headerlink\" title=\"加粗与斜体\"></a>加粗与斜体</h3><p>Markdown中实现文字的加粗与斜体也是非常的简单，用两个 <code>*</code> 包裹文字就能实现<strong>加粗</strong>，用一个 <code>*</code> 包裹文字，就能实现<em>斜体</em>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">**这里会加粗**</div><div class=\"line\"></div><div class=\"line\">*这里会斜体*</div></pre></td></tr></table></figure>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p>Markdown中无序列表可以通过在文字前加上 <code>*</code> <code>-</code> 或 <code>+</code> 中任意一个和空格实现，在文字前加上数字，点和空格(例如<code>1.</code>)就能实现有序列表.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">* 无序列表1</div><div class=\"line\">- 无序列表2</div><div class=\"line\">+ 无序列表3</div><div class=\"line\"></div><div class=\"line\">1. 有序列表1</div><div class=\"line\">2. 有序列表2</div></pre></td></tr></table></figure>\n<h3 id=\"图片与链接\"><a href=\"#图片与链接\" class=\"headerlink\" title=\"图片与链接\"></a>图片与链接</h3><p>都需要加入URL的图片和链接在Markdown中的实现方式比较类似:</p>\n<h4 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片:\"></a>图片:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">![Alt text](/path/to/img.jpg)</div><div class=\"line\">or</div><div class=\"line\">![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</div></pre></td></tr></table></figure>\n<p>方括号 <code>[]</code> 中为图片加载不出来时的替代文字，<code>()</code> 中第一项为图片的地址，第二项可选择性的加或者不加，其内容是图片的title.</p>\n<h4 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接:\"></a>链接:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[text](/path/to/page)</div></pre></td></tr></table></figure>\n<p><code>[]</code> 中放入链接文字，<code>()</code>中则为具体的url.</p>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><p>表格的格式如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">| col1       | col2       | col3       |</div><div class=\"line\">| :--------- |:----------:| ----------:|</div><div class=\"line\">| row1 col1  | row1 col2  | row1 col3  |</div><div class=\"line\">| row2 col1  | row2 col2  | row2 col3  |</div><div class=\"line\">| row3 col1  | row3 col2  | row3 col3  |</div></pre></td></tr></table></figure>\n<p>效果则为:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">col1</th>\n<th style=\"text-align:center\">col2</th>\n<th style=\"text-align:right\">col3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">row1 col1</td>\n<td style=\"text-align:center\">row1 col2</td>\n<td style=\"text-align:right\">row1 col3</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">row2 col1</td>\n<td style=\"text-align:center\">row2 col2</td>\n<td style=\"text-align:right\">row2 col3</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">row3 col1</td>\n<td style=\"text-align:center\">row3 col2</td>\n<td style=\"text-align:right\">row3 col3</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p>在文字前加上 <code>&gt;</code> 即可加入一段引用</p>\n<blockquote>\n<p>这是一段引用  </p>\n</blockquote>\n<p>如果需要加入很多行引用，则需要在每行前都加上 <code>&gt;</code></p>\n<blockquote>\n<p>这是<br>多行<br>引用</p>\n</blockquote>\n<h3 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h3><p>对于程序员来说，如何优雅在文本中加入代码块是一件很重(zhuang)要(B)的事情，在Markdown中加入代码块有多种方式:  </p>\n<ul>\n<li>缩进4个空格或者1个制表符(tab键)  </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">前面加四个空格或者一个tab就可以形成代码块</div></pre></td></tr></table></figure>\n<p>在列表行下使用此种方法时则需要缩进两次，所以为了使用方便和文字的区域性更加明显，不是很推荐这种方法来产生代码块.</p>\n<ul>\n<li>单行的代码用两个 <code>` </code> 符号包裹</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">`被包裹的单行代码块`</div></pre></td></tr></table></figure>\n<ul>\n<li>多行的代码则用分别用三个 <code>` </code> 将整段代码包裹，同时用此种方法加上不同的语言名字还可以为不同的程序语言设置不同的代码高亮，完美的解决了程序员的这一刚性需求</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">\\``` python</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\tprint(<span class=\"string\">'这里是多行代码'</span>)</div><div class=\"line\">\\```</div></pre></td></tr></table></figure>\n<p>(因为是特殊符号，所以在展示时加入了一个 \\ 取消符号的特殊含义方便展示，在实际使用时无需加上反斜杠)</p>\n<h2 id=\"其他语法\"><a href=\"#其他语法\" class=\"headerlink\" title=\"其他语法\"></a>其他语法</h2><h3 id=\"兼容HTML\"><a href=\"#兼容HTML\" class=\"headerlink\" title=\"兼容HTML\"></a>兼容HTML</h3><p>在Markdown中可以使用HTML的标签元素来对文字进行进一步的修改，例如Markdown中的文字大小一般是无法进行直接修改的，通过HTML标签或者直接修改CSS文件就可以做到修改Markdown文件中文字的大小颜色等属性.</p>\n<p><span style=\"font-size: 20px;color: red\">我变大了也变红了</span></p>\n<p>代码如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size: 20px;color: red\"</span>&gt;</span>我变大了也变红了<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>但是这些修改违背了Markdown让文档更容易读，写和改的意愿，所以一般不建议如此书写.</p>\n<h3 id=\"特殊字符自动转换\"><a href=\"#特殊字符自动转换\" class=\"headerlink\" title=\"特殊字符自动转换\"></a>特殊字符自动转换</h3><p>在 HTML 文件中，有两个字符需要特殊处理: &lt; 和 &amp; . &lt; 符号用于起始标签，&amp; 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 &lt; 和 &amp;.</p>\n<p>&amp; 字符尤其让网络文档编写者受折磨，如果你要打「AT&amp;T」 ，你必须要写成「AT&amp;T」。而网址中的 &amp; 字符也要转换。比如你要链接到：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://images.google.com/images?num=30&amp;q=larry+bird</div></pre></td></tr></table></figure>\n<p>你必须要把网址转换写为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://images.google.com/images?num=30&amp;amp;q=larry+bird</div></pre></td></tr></table></figure>\n<p>才能放到链接标签的 href 属性里.</p>\n<h3 id=\"反斜杠取消符号特殊含义\"><a href=\"#反斜杠取消符号特殊含义\" class=\"headerlink\" title=\"反斜杠取消符号特殊含义\"></a>反斜杠取消符号特殊含义</h3><p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如: <code>\\*我不会变斜\\*</code></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href=\"http://www.jianshu.com/p/1e402922ee32\" target=\"_blank\" rel=\"external\">Markdown——入门指南</a></li>\n<li><a href=\"http://wowubuntu.com/markdown/index.html#backslash\" target=\"_blank\" rel=\"external\">Markdown 语法说明</a></li>\n</ul>\n</blockquote>"},{"title":"记一次Macbook Pro的换屏经历","date":"2017-07-31T22:45:40.000Z","_content":"## 换屏动机\n用Macbook Pro的小伙伴们肯定或多或少的都听说过Macbook retain屏幕的镀膜图层脱落的问题，本人手中的15寸的pro小老婆也无可避免的遇到了这个问题，一小片一小片脱落的图层在整个屏幕上显得十分的丑陋并且影响观感，然而我实在是懒得不行一直不愿意去管，直到最近开始发现已经有点影响到正常的屏幕显示了，实在受不了了就Google了一下这个问题，发现在国内竟然也可以免费换屏，那这就没啥说的了，果断换之。\n\nPS. 根据店员的说法，每一个购买了Macbook的用户，如果出现了屏幕上镀层脱落的问题，不管严重与否，都是可以进行一次免费换屏的服务的，我自己的屏幕除了镀膜脱落的问题外，也有错位的问题，但是也无偿享受了免费的换屏服务，所以也有同样问题的小伙伴，都可以考虑去换一个新的屏幕。\n\n<!--more-->\n\n## 事前预约\n\n某天本人打电话给苹果的售后 `400-666-8800` 询问了一下具体苹果关于处理镀层脱落的政策，确认了可以无偿的免费换屏，但是对于具体不同的维修点或者直营店，可能会存在不同的服务费，这个需要具体看直营店或者维修点的情况，接下来就是要去预约维修点或直营店和具体的时间了。预约可以打电话给客服直接在电话里让他帮你预约，也可以登陆apple的官网自己手动预约，本着自己的事情自己做的原则，我当然是在官网自己预约的，具体流程如下:\n\n首先登陆Apple的中国官网，并点击进入 `技术支持`:  \n![](/uploads/replace_screen/pic1.png)\n\n之后再页面中下滑，找到 ”您需要哪方面帮助？“ 并点击 `获得支持` 按钮:  \n![](/uploads/replace_screen/pic2.png)\n\n之后选择自己的设备，因为是电脑换屏，所以我这里选择的是 `Mac`:  \n![](/uploads/replace_screen/pic3.png)\n\n然后会出现如下图的选项来选择需要处理哪部分的问题，这里我选择 `Hardware Issues`:  \n![](/uploads/replace_screen/pic4.png)\n\n最后选择 `Bring in for Repair` 然后用自己的apple ID登陆，就可以选择直营店和时间进行预约了:  \n![](/uploads/replace_screen/pic5.png)\n\n预约维修需要提供本人的身份证，所以到店维修和取的时候都需要记得带上自己的身份证，我去去电脑的时候就见到一个人帮他老婆取修的手机，带了老婆的身份证没带自己的身份证店员不让她取的尴尬事情。\n\nPS.可以维修苹果设备的地方分为直营店和苹果的授权维修点两种，顾名思义前一种是Apple直接开设管理的集销售，维修，售后为一身的店铺，通常开设在大城市的商业中心，后一种说的难听点就是普通的修电脑的电脑城，只不过拿到了苹果的授权可以专业的来维修苹果的设备。我这里建议，对于比较严重的或者说需要给设备更换零件的问题，还是去苹果的直营店比较保险，随便Google一下可以看到很多授权维修点坑客户的事件，所以为了自己设备的安全，这里建议大家去苹果直营店比较保险。\n\n## 到店维修\n\n预约成功后，提前预约的时间10分钟左右到店找到专门负责售后的店员，店员会安排专门的工程师来处理用户的问题。我预约的是北京王府井的Apple store apm店，不得不说，周末再加上是王府井，当天下午的人可真的是不少。工程师见到我的电脑，感慨了一下从来没见过像我这样图层脱落的情况，然后测试了一下电脑的其他性能(电池，硬盘，CPU)什么的，就安排免费的屏幕更换了，连服务费都免了！这里我要点10个赞！然后打了一张维修单，等着短信，电话或者邮件通知再来凭维修单和身份证取机器就行了。\n\n## 换屏完成\n\n苹果的售后维修一般是48小时之内完成的，由于我周一要用电脑，就给加急了，当天晚上10点接到工程师的电话(看来当苹果的硬件工程师也得加班到很晚)，说是屏幕换完了，还顺便帮清了个灰让第二天去取。第二天一早就爬起来又跑到王府井去取电脑(住在西二旗连续两天花3个小时往返王府井也是累的不行)，拿到电脑看到换好屏幕的pro小老婆，对比之前那块脏兮兮的屏幕，感觉自己处女座强迫症被极大的满足了，又可以继续愉快的敲代码了！\n\n来晒一下换好屏幕的以后的效果:\n![](/uploads/replace_screen/pic6.png)","source":"_posts/replace-screen.md","raw":"---\ntitle: 记一次Macbook Pro的换屏经历\ndate: 2017-07-31 15:45:40\ntags: 搞机\ncategories: 生活\n---\n## 换屏动机\n用Macbook Pro的小伙伴们肯定或多或少的都听说过Macbook retain屏幕的镀膜图层脱落的问题，本人手中的15寸的pro小老婆也无可避免的遇到了这个问题，一小片一小片脱落的图层在整个屏幕上显得十分的丑陋并且影响观感，然而我实在是懒得不行一直不愿意去管，直到最近开始发现已经有点影响到正常的屏幕显示了，实在受不了了就Google了一下这个问题，发现在国内竟然也可以免费换屏，那这就没啥说的了，果断换之。\n\nPS. 根据店员的说法，每一个购买了Macbook的用户，如果出现了屏幕上镀层脱落的问题，不管严重与否，都是可以进行一次免费换屏的服务的，我自己的屏幕除了镀膜脱落的问题外，也有错位的问题，但是也无偿享受了免费的换屏服务，所以也有同样问题的小伙伴，都可以考虑去换一个新的屏幕。\n\n<!--more-->\n\n## 事前预约\n\n某天本人打电话给苹果的售后 `400-666-8800` 询问了一下具体苹果关于处理镀层脱落的政策，确认了可以无偿的免费换屏，但是对于具体不同的维修点或者直营店，可能会存在不同的服务费，这个需要具体看直营店或者维修点的情况，接下来就是要去预约维修点或直营店和具体的时间了。预约可以打电话给客服直接在电话里让他帮你预约，也可以登陆apple的官网自己手动预约，本着自己的事情自己做的原则，我当然是在官网自己预约的，具体流程如下:\n\n首先登陆Apple的中国官网，并点击进入 `技术支持`:  \n![](/uploads/replace_screen/pic1.png)\n\n之后再页面中下滑，找到 ”您需要哪方面帮助？“ 并点击 `获得支持` 按钮:  \n![](/uploads/replace_screen/pic2.png)\n\n之后选择自己的设备，因为是电脑换屏，所以我这里选择的是 `Mac`:  \n![](/uploads/replace_screen/pic3.png)\n\n然后会出现如下图的选项来选择需要处理哪部分的问题，这里我选择 `Hardware Issues`:  \n![](/uploads/replace_screen/pic4.png)\n\n最后选择 `Bring in for Repair` 然后用自己的apple ID登陆，就可以选择直营店和时间进行预约了:  \n![](/uploads/replace_screen/pic5.png)\n\n预约维修需要提供本人的身份证，所以到店维修和取的时候都需要记得带上自己的身份证，我去去电脑的时候就见到一个人帮他老婆取修的手机，带了老婆的身份证没带自己的身份证店员不让她取的尴尬事情。\n\nPS.可以维修苹果设备的地方分为直营店和苹果的授权维修点两种，顾名思义前一种是Apple直接开设管理的集销售，维修，售后为一身的店铺，通常开设在大城市的商业中心，后一种说的难听点就是普通的修电脑的电脑城，只不过拿到了苹果的授权可以专业的来维修苹果的设备。我这里建议，对于比较严重的或者说需要给设备更换零件的问题，还是去苹果的直营店比较保险，随便Google一下可以看到很多授权维修点坑客户的事件，所以为了自己设备的安全，这里建议大家去苹果直营店比较保险。\n\n## 到店维修\n\n预约成功后，提前预约的时间10分钟左右到店找到专门负责售后的店员，店员会安排专门的工程师来处理用户的问题。我预约的是北京王府井的Apple store apm店，不得不说，周末再加上是王府井，当天下午的人可真的是不少。工程师见到我的电脑，感慨了一下从来没见过像我这样图层脱落的情况，然后测试了一下电脑的其他性能(电池，硬盘，CPU)什么的，就安排免费的屏幕更换了，连服务费都免了！这里我要点10个赞！然后打了一张维修单，等着短信，电话或者邮件通知再来凭维修单和身份证取机器就行了。\n\n## 换屏完成\n\n苹果的售后维修一般是48小时之内完成的，由于我周一要用电脑，就给加急了，当天晚上10点接到工程师的电话(看来当苹果的硬件工程师也得加班到很晚)，说是屏幕换完了，还顺便帮清了个灰让第二天去取。第二天一早就爬起来又跑到王府井去取电脑(住在西二旗连续两天花3个小时往返王府井也是累的不行)，拿到电脑看到换好屏幕的pro小老婆，对比之前那块脏兮兮的屏幕，感觉自己处女座强迫症被极大的满足了，又可以继续愉快的敲代码了！\n\n来晒一下换好屏幕的以后的效果:\n![](/uploads/replace_screen/pic6.png)","slug":"replace-screen","published":1,"updated":"2017-07-31T09:18:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj77wke3a0008fiilf38dud0v","content":"<h2 id=\"换屏动机\"><a href=\"#换屏动机\" class=\"headerlink\" title=\"换屏动机\"></a>换屏动机</h2><p>用Macbook Pro的小伙伴们肯定或多或少的都听说过Macbook retain屏幕的镀膜图层脱落的问题，本人手中的15寸的pro小老婆也无可避免的遇到了这个问题，一小片一小片脱落的图层在整个屏幕上显得十分的丑陋并且影响观感，然而我实在是懒得不行一直不愿意去管，直到最近开始发现已经有点影响到正常的屏幕显示了，实在受不了了就Google了一下这个问题，发现在国内竟然也可以免费换屏，那这就没啥说的了，果断换之。</p>\n<p>PS. 根据店员的说法，每一个购买了Macbook的用户，如果出现了屏幕上镀层脱落的问题，不管严重与否，都是可以进行一次免费换屏的服务的，我自己的屏幕除了镀膜脱落的问题外，也有错位的问题，但是也无偿享受了免费的换屏服务，所以也有同样问题的小伙伴，都可以考虑去换一个新的屏幕。</p>\n<a id=\"more\"></a>\n<h2 id=\"事前预约\"><a href=\"#事前预约\" class=\"headerlink\" title=\"事前预约\"></a>事前预约</h2><p>某天本人打电话给苹果的售后 <code>400-666-8800</code> 询问了一下具体苹果关于处理镀层脱落的政策，确认了可以无偿的免费换屏，但是对于具体不同的维修点或者直营店，可能会存在不同的服务费，这个需要具体看直营店或者维修点的情况，接下来就是要去预约维修点或直营店和具体的时间了。预约可以打电话给客服直接在电话里让他帮你预约，也可以登陆apple的官网自己手动预约，本着自己的事情自己做的原则，我当然是在官网自己预约的，具体流程如下:</p>\n<p>首先登陆Apple的中国官网，并点击进入 <code>技术支持</code>:<br><img src=\"/uploads/replace_screen/pic1.png\" alt=\"\"></p>\n<p>之后再页面中下滑，找到 ”您需要哪方面帮助？“ 并点击 <code>获得支持</code> 按钮:<br><img src=\"/uploads/replace_screen/pic2.png\" alt=\"\"></p>\n<p>之后选择自己的设备，因为是电脑换屏，所以我这里选择的是 <code>Mac</code>:<br><img src=\"/uploads/replace_screen/pic3.png\" alt=\"\"></p>\n<p>然后会出现如下图的选项来选择需要处理哪部分的问题，这里我选择 <code>Hardware Issues</code>:<br><img src=\"/uploads/replace_screen/pic4.png\" alt=\"\"></p>\n<p>最后选择 <code>Bring in for Repair</code> 然后用自己的apple ID登陆，就可以选择直营店和时间进行预约了:<br><img src=\"/uploads/replace_screen/pic5.png\" alt=\"\"></p>\n<p>预约维修需要提供本人的身份证，所以到店维修和取的时候都需要记得带上自己的身份证，我去去电脑的时候就见到一个人帮他老婆取修的手机，带了老婆的身份证没带自己的身份证店员不让她取的尴尬事情。</p>\n<p>PS.可以维修苹果设备的地方分为直营店和苹果的授权维修点两种，顾名思义前一种是Apple直接开设管理的集销售，维修，售后为一身的店铺，通常开设在大城市的商业中心，后一种说的难听点就是普通的修电脑的电脑城，只不过拿到了苹果的授权可以专业的来维修苹果的设备。我这里建议，对于比较严重的或者说需要给设备更换零件的问题，还是去苹果的直营店比较保险，随便Google一下可以看到很多授权维修点坑客户的事件，所以为了自己设备的安全，这里建议大家去苹果直营店比较保险。</p>\n<h2 id=\"到店维修\"><a href=\"#到店维修\" class=\"headerlink\" title=\"到店维修\"></a>到店维修</h2><p>预约成功后，提前预约的时间10分钟左右到店找到专门负责售后的店员，店员会安排专门的工程师来处理用户的问题。我预约的是北京王府井的Apple store apm店，不得不说，周末再加上是王府井，当天下午的人可真的是不少。工程师见到我的电脑，感慨了一下从来没见过像我这样图层脱落的情况，然后测试了一下电脑的其他性能(电池，硬盘，CPU)什么的，就安排免费的屏幕更换了，连服务费都免了！这里我要点10个赞！然后打了一张维修单，等着短信，电话或者邮件通知再来凭维修单和身份证取机器就行了。</p>\n<h2 id=\"换屏完成\"><a href=\"#换屏完成\" class=\"headerlink\" title=\"换屏完成\"></a>换屏完成</h2><p>苹果的售后维修一般是48小时之内完成的，由于我周一要用电脑，就给加急了，当天晚上10点接到工程师的电话(看来当苹果的硬件工程师也得加班到很晚)，说是屏幕换完了，还顺便帮清了个灰让第二天去取。第二天一早就爬起来又跑到王府井去取电脑(住在西二旗连续两天花3个小时往返王府井也是累的不行)，拿到电脑看到换好屏幕的pro小老婆，对比之前那块脏兮兮的屏幕，感觉自己处女座强迫症被极大的满足了，又可以继续愉快的敲代码了！</p>\n<p>来晒一下换好屏幕的以后的效果:<br><img src=\"/uploads/replace_screen/pic6.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"换屏动机\"><a href=\"#换屏动机\" class=\"headerlink\" title=\"换屏动机\"></a>换屏动机</h2><p>用Macbook Pro的小伙伴们肯定或多或少的都听说过Macbook retain屏幕的镀膜图层脱落的问题，本人手中的15寸的pro小老婆也无可避免的遇到了这个问题，一小片一小片脱落的图层在整个屏幕上显得十分的丑陋并且影响观感，然而我实在是懒得不行一直不愿意去管，直到最近开始发现已经有点影响到正常的屏幕显示了，实在受不了了就Google了一下这个问题，发现在国内竟然也可以免费换屏，那这就没啥说的了，果断换之。</p>\n<p>PS. 根据店员的说法，每一个购买了Macbook的用户，如果出现了屏幕上镀层脱落的问题，不管严重与否，都是可以进行一次免费换屏的服务的，我自己的屏幕除了镀膜脱落的问题外，也有错位的问题，但是也无偿享受了免费的换屏服务，所以也有同样问题的小伙伴，都可以考虑去换一个新的屏幕。</p>","more":"<h2 id=\"事前预约\"><a href=\"#事前预约\" class=\"headerlink\" title=\"事前预约\"></a>事前预约</h2><p>某天本人打电话给苹果的售后 <code>400-666-8800</code> 询问了一下具体苹果关于处理镀层脱落的政策，确认了可以无偿的免费换屏，但是对于具体不同的维修点或者直营店，可能会存在不同的服务费，这个需要具体看直营店或者维修点的情况，接下来就是要去预约维修点或直营店和具体的时间了。预约可以打电话给客服直接在电话里让他帮你预约，也可以登陆apple的官网自己手动预约，本着自己的事情自己做的原则，我当然是在官网自己预约的，具体流程如下:</p>\n<p>首先登陆Apple的中国官网，并点击进入 <code>技术支持</code>:<br><img src=\"/uploads/replace_screen/pic1.png\" alt=\"\"></p>\n<p>之后再页面中下滑，找到 ”您需要哪方面帮助？“ 并点击 <code>获得支持</code> 按钮:<br><img src=\"/uploads/replace_screen/pic2.png\" alt=\"\"></p>\n<p>之后选择自己的设备，因为是电脑换屏，所以我这里选择的是 <code>Mac</code>:<br><img src=\"/uploads/replace_screen/pic3.png\" alt=\"\"></p>\n<p>然后会出现如下图的选项来选择需要处理哪部分的问题，这里我选择 <code>Hardware Issues</code>:<br><img src=\"/uploads/replace_screen/pic4.png\" alt=\"\"></p>\n<p>最后选择 <code>Bring in for Repair</code> 然后用自己的apple ID登陆，就可以选择直营店和时间进行预约了:<br><img src=\"/uploads/replace_screen/pic5.png\" alt=\"\"></p>\n<p>预约维修需要提供本人的身份证，所以到店维修和取的时候都需要记得带上自己的身份证，我去去电脑的时候就见到一个人帮他老婆取修的手机，带了老婆的身份证没带自己的身份证店员不让她取的尴尬事情。</p>\n<p>PS.可以维修苹果设备的地方分为直营店和苹果的授权维修点两种，顾名思义前一种是Apple直接开设管理的集销售，维修，售后为一身的店铺，通常开设在大城市的商业中心，后一种说的难听点就是普通的修电脑的电脑城，只不过拿到了苹果的授权可以专业的来维修苹果的设备。我这里建议，对于比较严重的或者说需要给设备更换零件的问题，还是去苹果的直营店比较保险，随便Google一下可以看到很多授权维修点坑客户的事件，所以为了自己设备的安全，这里建议大家去苹果直营店比较保险。</p>\n<h2 id=\"到店维修\"><a href=\"#到店维修\" class=\"headerlink\" title=\"到店维修\"></a>到店维修</h2><p>预约成功后，提前预约的时间10分钟左右到店找到专门负责售后的店员，店员会安排专门的工程师来处理用户的问题。我预约的是北京王府井的Apple store apm店，不得不说，周末再加上是王府井，当天下午的人可真的是不少。工程师见到我的电脑，感慨了一下从来没见过像我这样图层脱落的情况，然后测试了一下电脑的其他性能(电池，硬盘，CPU)什么的，就安排免费的屏幕更换了，连服务费都免了！这里我要点10个赞！然后打了一张维修单，等着短信，电话或者邮件通知再来凭维修单和身份证取机器就行了。</p>\n<h2 id=\"换屏完成\"><a href=\"#换屏完成\" class=\"headerlink\" title=\"换屏完成\"></a>换屏完成</h2><p>苹果的售后维修一般是48小时之内完成的，由于我周一要用电脑，就给加急了，当天晚上10点接到工程师的电话(看来当苹果的硬件工程师也得加班到很晚)，说是屏幕换完了，还顺便帮清了个灰让第二天去取。第二天一早就爬起来又跑到王府井去取电脑(住在西二旗连续两天花3个小时往返王府井也是累的不行)，拿到电脑看到换好屏幕的pro小老婆，对比之前那块脏兮兮的屏幕，感觉自己处女座强迫症被极大的满足了，又可以继续愉快的敲代码了！</p>\n<p>来晒一下换好屏幕的以后的效果:<br><img src=\"/uploads/replace_screen/pic6.png\" alt=\"\"></p>"},{"title":"快速排序 & 归并排序小记","date":"2017-08-15T22:54:29.000Z","_content":"\n排序是在学习算法和编程中最基础的一部分，而快速排序和归并排序又是这其中使用最普遍的两种排序方式，具体两种排序的实现原理网上有大量的讲解，这里只记录一些具体的代码实现，方便自己忘记的时候进行查阅。\n\n<!--more-->\n\n### 快速排序(Quick Sort)\n\n**时间复杂度:** 平均: O(N___log___N)  最优: O(N)  最差: O(N^2)\n**空间复杂度:** O(logN) (因为递归调用，所以是O(logN)不是O(1))\n\n* 方法一:  \n\n```java\npublic void quickSort(int[] nums, int left, int right) {\n    int i = left, j = right, key = nums[right];\n    while(i < j) {\n        while(i < j && nums[i] < key)\n            i++;\n\n        nums[j] = nums[i];\n\n        while(i < j && nums[j] >= key)\n            j--;\n\n        nums[i] = nums[j];\n    }\n    nums[i] = key;\n\n    if(i - 1 > left)\n        quickSort(nums, left, i - 1);\n\n    if(i + 1 < right)\n        quickSort(nums, i + 1, right);\n}\n```\n\n* 方法二:\n\n```java\npublic void quickSort(int[] nums, int left, int right) {\n    int i = left, j = right, mid = (right - left) / 2 + left;\n    int key = nums[mid];\n    while(i <= j) {\n        while(nums[i] < key)\n            i++;\n    \t\t\n        while(nums[j] > key)\n            j--;\n\n    \tif(i <= j) {\n            int temp = nums[i];\n            nums[i] = nums[j];\n            nums[j] = temp;\n            i++;\n            j--;\n        }\n    }\n    if(j > left)\n        quickSort(nums, left, j);\n    \n    if(i < right)\n        quickSort(nums, i, right);\n\t\n}\n```\n\n注意，在方法二中，从right往左遍历的时候，不能考虑 `nums[j] == key` 的情况，否则有可能会出现数组左边都是大于 `key` 右边都是等于 `key` 的情况，这时排序就无法继续进行。  \n\n### 归并排序(Merge Sort)\n\n**时间复杂度:** 平均: O(NlogN)  最优: O(NlogN)  最差: O(NlogN)\n**空间复杂度:** O(N)\n\n```java\nprivate void mergeSort(int[] nums, int left, int right) {\n    if(left >= right) return;\n\n    int mid = (right - left) / 2 + left;\n    mergeSort(nums, left, mid);\n    mergeSort(nums, mid + 1, right);\n\n    mergeArray(nums, left, mid, right);\n}\n\nprivate void mergeArray(int[] nums, int start, int mid, int end) {\n    int i = start, j = mid + 1, index = 0;\n    int[] temp = new int[end - start + 1];\n    while(i <= mid && j <= end) {\n        if(nums[i] < nums[j])\n            temp[index++] = nums[i++];\n        else\n            temp[index++] = nums[j++];\n    }\n\n    while(i <= mid)\n        temp[index++] = nums[i++];\n\n    while(j <= end)\n        temp[index++] = nums[j++];\n\n    for(int x = 0; x < index; x++)\n        nums[x + start] = temp[x];\n}\n```","source":"_posts/sort.md","raw":"---\ntitle: 快速排序 & 归并排序小记\ndate: 2017-08-15 15:54:29\ntags: \n    - sort\n    - leetcode\ncategories: 技术\n---\n\n排序是在学习算法和编程中最基础的一部分，而快速排序和归并排序又是这其中使用最普遍的两种排序方式，具体两种排序的实现原理网上有大量的讲解，这里只记录一些具体的代码实现，方便自己忘记的时候进行查阅。\n\n<!--more-->\n\n### 快速排序(Quick Sort)\n\n**时间复杂度:** 平均: O(N___log___N)  最优: O(N)  最差: O(N^2)\n**空间复杂度:** O(logN) (因为递归调用，所以是O(logN)不是O(1))\n\n* 方法一:  \n\n```java\npublic void quickSort(int[] nums, int left, int right) {\n    int i = left, j = right, key = nums[right];\n    while(i < j) {\n        while(i < j && nums[i] < key)\n            i++;\n\n        nums[j] = nums[i];\n\n        while(i < j && nums[j] >= key)\n            j--;\n\n        nums[i] = nums[j];\n    }\n    nums[i] = key;\n\n    if(i - 1 > left)\n        quickSort(nums, left, i - 1);\n\n    if(i + 1 < right)\n        quickSort(nums, i + 1, right);\n}\n```\n\n* 方法二:\n\n```java\npublic void quickSort(int[] nums, int left, int right) {\n    int i = left, j = right, mid = (right - left) / 2 + left;\n    int key = nums[mid];\n    while(i <= j) {\n        while(nums[i] < key)\n            i++;\n    \t\t\n        while(nums[j] > key)\n            j--;\n\n    \tif(i <= j) {\n            int temp = nums[i];\n            nums[i] = nums[j];\n            nums[j] = temp;\n            i++;\n            j--;\n        }\n    }\n    if(j > left)\n        quickSort(nums, left, j);\n    \n    if(i < right)\n        quickSort(nums, i, right);\n\t\n}\n```\n\n注意，在方法二中，从right往左遍历的时候，不能考虑 `nums[j] == key` 的情况，否则有可能会出现数组左边都是大于 `key` 右边都是等于 `key` 的情况，这时排序就无法继续进行。  \n\n### 归并排序(Merge Sort)\n\n**时间复杂度:** 平均: O(NlogN)  最优: O(NlogN)  最差: O(NlogN)\n**空间复杂度:** O(N)\n\n```java\nprivate void mergeSort(int[] nums, int left, int right) {\n    if(left >= right) return;\n\n    int mid = (right - left) / 2 + left;\n    mergeSort(nums, left, mid);\n    mergeSort(nums, mid + 1, right);\n\n    mergeArray(nums, left, mid, right);\n}\n\nprivate void mergeArray(int[] nums, int start, int mid, int end) {\n    int i = start, j = mid + 1, index = 0;\n    int[] temp = new int[end - start + 1];\n    while(i <= mid && j <= end) {\n        if(nums[i] < nums[j])\n            temp[index++] = nums[i++];\n        else\n            temp[index++] = nums[j++];\n    }\n\n    while(i <= mid)\n        temp[index++] = nums[i++];\n\n    while(j <= end)\n        temp[index++] = nums[j++];\n\n    for(int x = 0; x < index; x++)\n        nums[x + start] = temp[x];\n}\n```","slug":"sort","published":1,"updated":"2017-08-15T08:40:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj77wke3c0009fiilglga7gv6","content":"<p>排序是在学习算法和编程中最基础的一部分，而快速排序和归并排序又是这其中使用最普遍的两种排序方式，具体两种排序的实现原理网上有大量的讲解，这里只记录一些具体的代码实现，方便自己忘记的时候进行查阅。</p>\n<a id=\"more\"></a>\n<h3 id=\"快速排序-Quick-Sort\"><a href=\"#快速排序-Quick-Sort\" class=\"headerlink\" title=\"快速排序(Quick Sort)\"></a>快速排序(Quick Sort)</h3><p><strong>时间复杂度:</strong> 平均: O(N<strong><em>log</em></strong>N)  最优: O(N)  最差: O(N^2)<br><strong>空间复杂度:</strong> O(logN) (因为递归调用，所以是O(logN)不是O(1))</p>\n<ul>\n<li>方法一:  </li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = left, j = right, key = nums[right];</div><div class=\"line\">    <span class=\"keyword\">while</span>(i &lt; j) &#123;</div><div class=\"line\">        <span class=\"keyword\">while</span>(i &lt; j &amp;&amp; nums[i] &lt; key)</div><div class=\"line\">            i++;</div><div class=\"line\"></div><div class=\"line\">        nums[j] = nums[i];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">while</span>(i &lt; j &amp;&amp; nums[j] &gt;= key)</div><div class=\"line\">            j--;</div><div class=\"line\"></div><div class=\"line\">        nums[i] = nums[j];</div><div class=\"line\">    &#125;</div><div class=\"line\">    nums[i] = key;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(i - <span class=\"number\">1</span> &gt; left)</div><div class=\"line\">        quickSort(nums, left, i - <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(i + <span class=\"number\">1</span> &lt; right)</div><div class=\"line\">        quickSort(nums, i + <span class=\"number\">1</span>, right);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>方法二:</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = left, j = right, mid = (right - left) / <span class=\"number\">2</span> + left;</div><div class=\"line\">    <span class=\"keyword\">int</span> key = nums[mid];</div><div class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= j) &#123;</div><div class=\"line\">        <span class=\"keyword\">while</span>(nums[i] &lt; key)</div><div class=\"line\">            i++;</div><div class=\"line\">    \t\t</div><div class=\"line\">        <span class=\"keyword\">while</span>(nums[j] &gt; key)</div><div class=\"line\">            j--;</div><div class=\"line\"></div><div class=\"line\">    \t<span class=\"keyword\">if</span>(i &lt;= j) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> temp = nums[i];</div><div class=\"line\">            nums[i] = nums[j];</div><div class=\"line\">            nums[j] = temp;</div><div class=\"line\">            i++;</div><div class=\"line\">            j--;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(j &gt; left)</div><div class=\"line\">        quickSort(nums, left, j);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span>(i &lt; right)</div><div class=\"line\">        quickSort(nums, i, right);</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意，在方法二中，从right往左遍历的时候，不能考虑 <code>nums[j] == key</code> 的情况，否则有可能会出现数组左边都是大于 <code>key</code> 右边都是等于 <code>key</code> 的情况，这时排序就无法继续进行。  </p>\n<h3 id=\"归并排序-Merge-Sort\"><a href=\"#归并排序-Merge-Sort\" class=\"headerlink\" title=\"归并排序(Merge Sort)\"></a>归并排序(Merge Sort)</h3><p><strong>时间复杂度:</strong> 平均: O(NlogN)  最优: O(NlogN)  最差: O(NlogN)<br><strong>空间复杂度:</strong> O(N)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(left &gt;= right) <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> mid = (right - left) / <span class=\"number\">2</span> + left;</div><div class=\"line\">    mergeSort(nums, left, mid);</div><div class=\"line\">    mergeSort(nums, mid + <span class=\"number\">1</span>, right);</div><div class=\"line\"></div><div class=\"line\">    mergeArray(nums, left, mid, right);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> end)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = start, j = mid + <span class=\"number\">1</span>, index = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span>[] temp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[end - start + <span class=\"number\">1</span>];</div><div class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= mid &amp;&amp; j &lt;= end) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(nums[i] &lt; nums[j])</div><div class=\"line\">            temp[index++] = nums[i++];</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            temp[index++] = nums[j++];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= mid)</div><div class=\"line\">        temp[index++] = nums[i++];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span>(j &lt;= end)</div><div class=\"line\">        temp[index++] = nums[j++];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; index; x++)</div><div class=\"line\">        nums[x + start] = temp[x];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>排序是在学习算法和编程中最基础的一部分，而快速排序和归并排序又是这其中使用最普遍的两种排序方式，具体两种排序的实现原理网上有大量的讲解，这里只记录一些具体的代码实现，方便自己忘记的时候进行查阅。</p>","more":"<h3 id=\"快速排序-Quick-Sort\"><a href=\"#快速排序-Quick-Sort\" class=\"headerlink\" title=\"快速排序(Quick Sort)\"></a>快速排序(Quick Sort)</h3><p><strong>时间复杂度:</strong> 平均: O(N<strong><em>log</em></strong>N)  最优: O(N)  最差: O(N^2)<br><strong>空间复杂度:</strong> O(logN) (因为递归调用，所以是O(logN)不是O(1))</p>\n<ul>\n<li>方法一:  </li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = left, j = right, key = nums[right];</div><div class=\"line\">    <span class=\"keyword\">while</span>(i &lt; j) &#123;</div><div class=\"line\">        <span class=\"keyword\">while</span>(i &lt; j &amp;&amp; nums[i] &lt; key)</div><div class=\"line\">            i++;</div><div class=\"line\"></div><div class=\"line\">        nums[j] = nums[i];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">while</span>(i &lt; j &amp;&amp; nums[j] &gt;= key)</div><div class=\"line\">            j--;</div><div class=\"line\"></div><div class=\"line\">        nums[i] = nums[j];</div><div class=\"line\">    &#125;</div><div class=\"line\">    nums[i] = key;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(i - <span class=\"number\">1</span> &gt; left)</div><div class=\"line\">        quickSort(nums, left, i - <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(i + <span class=\"number\">1</span> &lt; right)</div><div class=\"line\">        quickSort(nums, i + <span class=\"number\">1</span>, right);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>方法二:</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = left, j = right, mid = (right - left) / <span class=\"number\">2</span> + left;</div><div class=\"line\">    <span class=\"keyword\">int</span> key = nums[mid];</div><div class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= j) &#123;</div><div class=\"line\">        <span class=\"keyword\">while</span>(nums[i] &lt; key)</div><div class=\"line\">            i++;</div><div class=\"line\">    \t\t</div><div class=\"line\">        <span class=\"keyword\">while</span>(nums[j] &gt; key)</div><div class=\"line\">            j--;</div><div class=\"line\"></div><div class=\"line\">    \t<span class=\"keyword\">if</span>(i &lt;= j) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> temp = nums[i];</div><div class=\"line\">            nums[i] = nums[j];</div><div class=\"line\">            nums[j] = temp;</div><div class=\"line\">            i++;</div><div class=\"line\">            j--;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(j &gt; left)</div><div class=\"line\">        quickSort(nums, left, j);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span>(i &lt; right)</div><div class=\"line\">        quickSort(nums, i, right);</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意，在方法二中，从right往左遍历的时候，不能考虑 <code>nums[j] == key</code> 的情况，否则有可能会出现数组左边都是大于 <code>key</code> 右边都是等于 <code>key</code> 的情况，这时排序就无法继续进行。  </p>\n<h3 id=\"归并排序-Merge-Sort\"><a href=\"#归并排序-Merge-Sort\" class=\"headerlink\" title=\"归并排序(Merge Sort)\"></a>归并排序(Merge Sort)</h3><p><strong>时间复杂度:</strong> 平均: O(NlogN)  最优: O(NlogN)  最差: O(NlogN)<br><strong>空间复杂度:</strong> O(N)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(left &gt;= right) <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> mid = (right - left) / <span class=\"number\">2</span> + left;</div><div class=\"line\">    mergeSort(nums, left, mid);</div><div class=\"line\">    mergeSort(nums, mid + <span class=\"number\">1</span>, right);</div><div class=\"line\"></div><div class=\"line\">    mergeArray(nums, left, mid, right);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> end)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = start, j = mid + <span class=\"number\">1</span>, index = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span>[] temp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[end - start + <span class=\"number\">1</span>];</div><div class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= mid &amp;&amp; j &lt;= end) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(nums[i] &lt; nums[j])</div><div class=\"line\">            temp[index++] = nums[i++];</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            temp[index++] = nums[j++];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= mid)</div><div class=\"line\">        temp[index++] = nums[i++];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span>(j &lt;= end)</div><div class=\"line\">        temp[index++] = nums[j++];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; index; x++)</div><div class=\"line\">        nums[x + start] = temp[x];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Binary Tree Traversal","date":"2017-08-24T22:11:29.000Z","_content":"\n### 树的遍历\n\n二叉树的遍历是算法问题中一个特别基础的问题，主要分为三种，前序，中序和后序，不同的遍历方法会将树的节点以不同的顺序输出，这篇文章主要用来记录二叉树三种遍历具体的代码实现。\n\n<!--more-->\n\n<img src=\"/uploads/tree_traverse/binary_tree.png\" width=\"30%\">\n\n前序遍历: 1-245-3 (根 - 左 - 右)\n中序遍历: 425-1-3 (左 - 根 - 右)\n后序遍历: 452-3-1 (左 - 右 - 根)\n\n#### 二叉树的定义\n\n要用代码实现二叉树的遍历，首先要用代码来定义一个二叉树，具体就是定义一个树的节点类 `TreeNode` 最基本的树的节点包括了值，左子树和右子树等属性，有一些更复杂的也会包含自己的父节点和左右的同辈节点等。\n\n```java\nclass TreeNode {\n\tTreeNode left, right;\n\tint value;\n\t\n\tTreeNode(int value) {\n\t\tthis.value = value;\n\t}\n\t\n\tTreeNode(int value, TreeNode left, TreeNode right) {\n\t\tthis.value = value;\n\t\tthis.left = left;\n\t\tthis.right = right;\n\t}\n}\n```\n\n#### 前序遍历\n\n前序遍历是整个二叉树遍历中用非递归代码来实现相对比较容易的一种，其遍历顺序是先访问当前节点，再左子树节点，最后是右子树节点，所以顺序是: `跟 -> 左子节点 -> 右子节点`，前序遍历其实就是**DFS**，具体的代码实现如下：\n\n* 递归实现\n\n```java\npublic void preorderTraversal(TreeNode node, List<Integer> nodes) {\n\tif(node != null) {\n\t\tnodes.add(node.value);\n\t\tpreorderTraversal(node.left, nodes);\n\t\tpreorderTraversal(node.right, nodes);\n\t}\n}\n```\n\n* 非递归实现\n\n```java\npublic List<Integer> preorderTraversal(TreeNode node) {\n\tStack<TreeNode> stack = new Stack<>();\n\tList<Integer> nodes = new ArrayList<>();\n\tstack.push(node);\n\t\n\twhile(!stack.isEmpty()) {\n\t\tTreeNode curt = stack.pop();\n\t\tnodes.add(curt.value);\n\t\t\n\t\tif(curt.right != null)\n\t\t\tstack.push(curt.right);\n\t\t\t\n\t\tif(curt.left != null)\n\t\t\tstack.push(curt.left);\n\t}\n\t\n\treturn nodes;\n}\n```\n\n#### 中序遍历\n\n中序遍历的顺序是先遍历左子树节点，再遍历当前节点最后遍历右子树节点，所以顺序是: `左子节点 -> 根 -> 右子节点`，在二叉搜索树中，**因为左子树节点小于当前节点，而右子节点大于等于当前节点，所以中序遍历能够按照升序将树中的节点输出**，具体的代码实现如下:\n\n* 递归实现\n\n```java\npublic void inorderTraversal(TreeNode, List<Integer> nodes) {\n\tif(node != null) {\n\t\tinorderTraversal(node.left, nodes);\n\t\tnodes.add(node.value);\n\t\tinorderTraversal(node.right, nodes);\n\t}\n}\n```\n\n* 非递归实现\n\n```java\npublic void inorderTraversal(TreeNode node) {\n\tStack<TreeNode> stack = new Stack<>();\n\tList<Integer> nodes = new ArrayList<>();\n\tTreeNode curt = node;\n\t\n\twhile(curt != null || stack.isEmpty()) {\n\t\twhile(curt != null) {\n\t\t\tstack.push(curt);\n\t\t\tcurt = curt.left;\n\t\t}\n\t\tcurt = stack.pop();\n\t\tnodes.add(curt.value);\n\t\tcurt = curt.right;\n\t}\n\treturn nodes;\n}\n```\n\n#### 后序遍历\n\n后序遍历的顺序是先遍历左子节点，再遍历右子节点，最后遍历当前节点。所以顺序是: `左子节点 -> 右子节点 -> 根`，具体代码实现如下:\n\n* 递归实现\n\n```java\npublic void postorderTraversal(TreeNode node, List<Integer> nodes) {\n\tif(node =! null) {\n\t\tpostorderTraversal(node.left, nodes);\n\t\tpostorderTraversal(node.right, nodes);\n\t\tnodes.add(node.value);\n\t}\n}\n```\n\n* 非递归实现\n\n```java\npublic List<Integer> postorderTraversal(TreeNode node) {\n\tStack<TreeNode> stack = new Stack<>();\n\tList<Integer> nodes = new ArrayList<>();\n\tTreeNode prev = null;\n\t\n\tstack.push(node);\n\twhile(!stack.isEmpty()) {\n\t\tTreeNode curt = stack.peek();\n\t\tif(prev == null || prev.left == curt || prev.right == curt) {\n\t\t\tif(curt.left != null) \n\t\t\t\tstack.push(curt.left);\n\t\t\telse if(curt.right != null)\n\t\t\t\tstack.push(curt.right);\n\t\t} else if(curt.left == prev) {\n\t\t\tif(curt.right != null)\n\t\t\t\tstack.push(curt.right);\n\t\t} else {\n\t\t\tnodes.add(curt.value);\n\t\t\tstack.pop();\n\t\t}\n\t\tprev = curt;\n\t}\n\treturn nodes;\n}\n```","source":"_posts/tree-traversal.md","raw":"---\ntitle: Binary Tree Traversal\ndate: 2017-08-24 15:11:29\ntags: \n\t- binary tree\n\t- leetcode\ncategories: 技术\n---\n\n### 树的遍历\n\n二叉树的遍历是算法问题中一个特别基础的问题，主要分为三种，前序，中序和后序，不同的遍历方法会将树的节点以不同的顺序输出，这篇文章主要用来记录二叉树三种遍历具体的代码实现。\n\n<!--more-->\n\n<img src=\"/uploads/tree_traverse/binary_tree.png\" width=\"30%\">\n\n前序遍历: 1-245-3 (根 - 左 - 右)\n中序遍历: 425-1-3 (左 - 根 - 右)\n后序遍历: 452-3-1 (左 - 右 - 根)\n\n#### 二叉树的定义\n\n要用代码实现二叉树的遍历，首先要用代码来定义一个二叉树，具体就是定义一个树的节点类 `TreeNode` 最基本的树的节点包括了值，左子树和右子树等属性，有一些更复杂的也会包含自己的父节点和左右的同辈节点等。\n\n```java\nclass TreeNode {\n\tTreeNode left, right;\n\tint value;\n\t\n\tTreeNode(int value) {\n\t\tthis.value = value;\n\t}\n\t\n\tTreeNode(int value, TreeNode left, TreeNode right) {\n\t\tthis.value = value;\n\t\tthis.left = left;\n\t\tthis.right = right;\n\t}\n}\n```\n\n#### 前序遍历\n\n前序遍历是整个二叉树遍历中用非递归代码来实现相对比较容易的一种，其遍历顺序是先访问当前节点，再左子树节点，最后是右子树节点，所以顺序是: `跟 -> 左子节点 -> 右子节点`，前序遍历其实就是**DFS**，具体的代码实现如下：\n\n* 递归实现\n\n```java\npublic void preorderTraversal(TreeNode node, List<Integer> nodes) {\n\tif(node != null) {\n\t\tnodes.add(node.value);\n\t\tpreorderTraversal(node.left, nodes);\n\t\tpreorderTraversal(node.right, nodes);\n\t}\n}\n```\n\n* 非递归实现\n\n```java\npublic List<Integer> preorderTraversal(TreeNode node) {\n\tStack<TreeNode> stack = new Stack<>();\n\tList<Integer> nodes = new ArrayList<>();\n\tstack.push(node);\n\t\n\twhile(!stack.isEmpty()) {\n\t\tTreeNode curt = stack.pop();\n\t\tnodes.add(curt.value);\n\t\t\n\t\tif(curt.right != null)\n\t\t\tstack.push(curt.right);\n\t\t\t\n\t\tif(curt.left != null)\n\t\t\tstack.push(curt.left);\n\t}\n\t\n\treturn nodes;\n}\n```\n\n#### 中序遍历\n\n中序遍历的顺序是先遍历左子树节点，再遍历当前节点最后遍历右子树节点，所以顺序是: `左子节点 -> 根 -> 右子节点`，在二叉搜索树中，**因为左子树节点小于当前节点，而右子节点大于等于当前节点，所以中序遍历能够按照升序将树中的节点输出**，具体的代码实现如下:\n\n* 递归实现\n\n```java\npublic void inorderTraversal(TreeNode, List<Integer> nodes) {\n\tif(node != null) {\n\t\tinorderTraversal(node.left, nodes);\n\t\tnodes.add(node.value);\n\t\tinorderTraversal(node.right, nodes);\n\t}\n}\n```\n\n* 非递归实现\n\n```java\npublic void inorderTraversal(TreeNode node) {\n\tStack<TreeNode> stack = new Stack<>();\n\tList<Integer> nodes = new ArrayList<>();\n\tTreeNode curt = node;\n\t\n\twhile(curt != null || stack.isEmpty()) {\n\t\twhile(curt != null) {\n\t\t\tstack.push(curt);\n\t\t\tcurt = curt.left;\n\t\t}\n\t\tcurt = stack.pop();\n\t\tnodes.add(curt.value);\n\t\tcurt = curt.right;\n\t}\n\treturn nodes;\n}\n```\n\n#### 后序遍历\n\n后序遍历的顺序是先遍历左子节点，再遍历右子节点，最后遍历当前节点。所以顺序是: `左子节点 -> 右子节点 -> 根`，具体代码实现如下:\n\n* 递归实现\n\n```java\npublic void postorderTraversal(TreeNode node, List<Integer> nodes) {\n\tif(node =! null) {\n\t\tpostorderTraversal(node.left, nodes);\n\t\tpostorderTraversal(node.right, nodes);\n\t\tnodes.add(node.value);\n\t}\n}\n```\n\n* 非递归实现\n\n```java\npublic List<Integer> postorderTraversal(TreeNode node) {\n\tStack<TreeNode> stack = new Stack<>();\n\tList<Integer> nodes = new ArrayList<>();\n\tTreeNode prev = null;\n\t\n\tstack.push(node);\n\twhile(!stack.isEmpty()) {\n\t\tTreeNode curt = stack.peek();\n\t\tif(prev == null || prev.left == curt || prev.right == curt) {\n\t\t\tif(curt.left != null) \n\t\t\t\tstack.push(curt.left);\n\t\t\telse if(curt.right != null)\n\t\t\t\tstack.push(curt.right);\n\t\t} else if(curt.left == prev) {\n\t\t\tif(curt.right != null)\n\t\t\t\tstack.push(curt.right);\n\t\t} else {\n\t\t\tnodes.add(curt.value);\n\t\t\tstack.pop();\n\t\t}\n\t\tprev = curt;\n\t}\n\treturn nodes;\n}\n```","slug":"tree-traversal","published":1,"updated":"2017-08-24T08:41:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj77wke3e000cfiil41ec5g6r","content":"<h3 id=\"树的遍历\"><a href=\"#树的遍历\" class=\"headerlink\" title=\"树的遍历\"></a>树的遍历</h3><p>二叉树的遍历是算法问题中一个特别基础的问题，主要分为三种，前序，中序和后序，不同的遍历方法会将树的节点以不同的顺序输出，这篇文章主要用来记录二叉树三种遍历具体的代码实现。</p>\n<a id=\"more\"></a>\n<p><img src=\"/uploads/tree_traverse/binary_tree.png\" width=\"30%\"></p>\n<p>前序遍历: 1-245-3 (根 - 左 - 右)<br>中序遍历: 425-1-3 (左 - 根 - 右)<br>后序遍历: 452-3-1 (左 - 右 - 根)</p>\n<h4 id=\"二叉树的定义\"><a href=\"#二叉树的定义\" class=\"headerlink\" title=\"二叉树的定义\"></a>二叉树的定义</h4><p>要用代码实现二叉树的遍历，首先要用代码来定义一个二叉树，具体就是定义一个树的节点类 <code>TreeNode</code> 最基本的树的节点包括了值，左子树和右子树等属性，有一些更复杂的也会包含自己的父节点和左右的同辈节点等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</div><div class=\"line\">\tTreeNode left, right;</div><div class=\"line\">\t<span class=\"keyword\">int</span> value;</div><div class=\"line\">\t</div><div class=\"line\">\tTreeNode(<span class=\"keyword\">int</span> value) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tTreeNode(<span class=\"keyword\">int</span> value, TreeNode left, TreeNode right) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.left = left;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.right = right;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h4><p>前序遍历是整个二叉树遍历中用非递归代码来实现相对比较容易的一种，其遍历顺序是先访问当前节点，再左子树节点，最后是右子树节点，所以顺序是: <code>跟 -&gt; 左子节点 -&gt; 右子节点</code>，前序遍历其实就是<strong>DFS</strong>，具体的代码实现如下：</p>\n<ul>\n<li>递归实现</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preorderTraversal</span><span class=\"params\">(TreeNode node, List&lt;Integer&gt; nodes)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(node != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\tnodes.add(node.value);</div><div class=\"line\">\t\tpreorderTraversal(node.left, nodes);</div><div class=\"line\">\t\tpreorderTraversal(node.right, nodes);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>非递归实现</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">preorderTraversal</span><span class=\"params\">(TreeNode node)</span> </span>&#123;</div><div class=\"line\">\tStack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</div><div class=\"line\">\tList&lt;Integer&gt; nodes = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">\tstack.push(node);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">while</span>(!stack.isEmpty()) &#123;</div><div class=\"line\">\t\tTreeNode curt = stack.pop();</div><div class=\"line\">\t\tnodes.add(curt.value);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(curt.right != <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\tstack.push(curt.right);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(curt.left != <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\tstack.push(curt.left);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">return</span> nodes;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h4><p>中序遍历的顺序是先遍历左子树节点，再遍历当前节点最后遍历右子树节点，所以顺序是: <code>左子节点 -&gt; 根 -&gt; 右子节点</code>，在二叉搜索树中，<strong>因为左子树节点小于当前节点，而右子节点大于等于当前节点，所以中序遍历能够按照升序将树中的节点输出</strong>，具体的代码实现如下:</p>\n<ul>\n<li>递归实现</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inorderTraversal</span><span class=\"params\">(TreeNode, List&lt;Integer&gt; nodes)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(node != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\tinorderTraversal(node.left, nodes);</div><div class=\"line\">\t\tnodes.add(node.value);</div><div class=\"line\">\t\tinorderTraversal(node.right, nodes);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>非递归实现</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inorderTraversal</span><span class=\"params\">(TreeNode node)</span> </span>&#123;</div><div class=\"line\">\tStack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</div><div class=\"line\">\tList&lt;Integer&gt; nodes = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">\tTreeNode curt = node;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">while</span>(curt != <span class=\"keyword\">null</span> || stack.isEmpty()) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(curt != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\tstack.push(curt);</div><div class=\"line\">\t\t\tcurt = curt.left;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tcurt = stack.pop();</div><div class=\"line\">\t\tnodes.add(curt.value);</div><div class=\"line\">\t\tcurt = curt.right;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> nodes;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"后序遍历\"><a href=\"#后序遍历\" class=\"headerlink\" title=\"后序遍历\"></a>后序遍历</h4><p>后序遍历的顺序是先遍历左子节点，再遍历右子节点，最后遍历当前节点。所以顺序是: <code>左子节点 -&gt; 右子节点 -&gt; 根</code>，具体代码实现如下:</p>\n<ul>\n<li>递归实现</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postorderTraversal</span><span class=\"params\">(TreeNode node, List&lt;Integer&gt; nodes)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(node =! <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\tpostorderTraversal(node.left, nodes);</div><div class=\"line\">\t\tpostorderTraversal(node.right, nodes);</div><div class=\"line\">\t\tnodes.add(node.value);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>非递归实现</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">postorderTraversal</span><span class=\"params\">(TreeNode node)</span> </span>&#123;</div><div class=\"line\">\tStack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</div><div class=\"line\">\tList&lt;Integer&gt; nodes = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">\tTreeNode prev = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t</div><div class=\"line\">\tstack.push(node);</div><div class=\"line\">\t<span class=\"keyword\">while</span>(!stack.isEmpty()) &#123;</div><div class=\"line\">\t\tTreeNode curt = stack.peek();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(prev == <span class=\"keyword\">null</span> || prev.left == curt || prev.right == curt) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(curt.left != <span class=\"keyword\">null</span>) </div><div class=\"line\">\t\t\t\tstack.push(curt.left);</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(curt.right != <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\tstack.push(curt.right);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(curt.left == prev) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(curt.right != <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\tstack.push(curt.right);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tnodes.add(curt.value);</div><div class=\"line\">\t\t\tstack.pop();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tprev = curt;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> nodes;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"树的遍历\"><a href=\"#树的遍历\" class=\"headerlink\" title=\"树的遍历\"></a>树的遍历</h3><p>二叉树的遍历是算法问题中一个特别基础的问题，主要分为三种，前序，中序和后序，不同的遍历方法会将树的节点以不同的顺序输出，这篇文章主要用来记录二叉树三种遍历具体的代码实现。</p>","more":"<p><img src=\"/uploads/tree_traverse/binary_tree.png\" width=\"30%\"></p>\n<p>前序遍历: 1-245-3 (根 - 左 - 右)<br>中序遍历: 425-1-3 (左 - 根 - 右)<br>后序遍历: 452-3-1 (左 - 右 - 根)</p>\n<h4 id=\"二叉树的定义\"><a href=\"#二叉树的定义\" class=\"headerlink\" title=\"二叉树的定义\"></a>二叉树的定义</h4><p>要用代码实现二叉树的遍历，首先要用代码来定义一个二叉树，具体就是定义一个树的节点类 <code>TreeNode</code> 最基本的树的节点包括了值，左子树和右子树等属性，有一些更复杂的也会包含自己的父节点和左右的同辈节点等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</div><div class=\"line\">\tTreeNode left, right;</div><div class=\"line\">\t<span class=\"keyword\">int</span> value;</div><div class=\"line\">\t</div><div class=\"line\">\tTreeNode(<span class=\"keyword\">int</span> value) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tTreeNode(<span class=\"keyword\">int</span> value, TreeNode left, TreeNode right) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.left = left;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.right = right;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h4><p>前序遍历是整个二叉树遍历中用非递归代码来实现相对比较容易的一种，其遍历顺序是先访问当前节点，再左子树节点，最后是右子树节点，所以顺序是: <code>跟 -&gt; 左子节点 -&gt; 右子节点</code>，前序遍历其实就是<strong>DFS</strong>，具体的代码实现如下：</p>\n<ul>\n<li>递归实现</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preorderTraversal</span><span class=\"params\">(TreeNode node, List&lt;Integer&gt; nodes)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(node != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\tnodes.add(node.value);</div><div class=\"line\">\t\tpreorderTraversal(node.left, nodes);</div><div class=\"line\">\t\tpreorderTraversal(node.right, nodes);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>非递归实现</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">preorderTraversal</span><span class=\"params\">(TreeNode node)</span> </span>&#123;</div><div class=\"line\">\tStack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</div><div class=\"line\">\tList&lt;Integer&gt; nodes = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">\tstack.push(node);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">while</span>(!stack.isEmpty()) &#123;</div><div class=\"line\">\t\tTreeNode curt = stack.pop();</div><div class=\"line\">\t\tnodes.add(curt.value);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(curt.right != <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\tstack.push(curt.right);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(curt.left != <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\tstack.push(curt.left);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">return</span> nodes;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h4><p>中序遍历的顺序是先遍历左子树节点，再遍历当前节点最后遍历右子树节点，所以顺序是: <code>左子节点 -&gt; 根 -&gt; 右子节点</code>，在二叉搜索树中，<strong>因为左子树节点小于当前节点，而右子节点大于等于当前节点，所以中序遍历能够按照升序将树中的节点输出</strong>，具体的代码实现如下:</p>\n<ul>\n<li>递归实现</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inorderTraversal</span><span class=\"params\">(TreeNode, List&lt;Integer&gt; nodes)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(node != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\tinorderTraversal(node.left, nodes);</div><div class=\"line\">\t\tnodes.add(node.value);</div><div class=\"line\">\t\tinorderTraversal(node.right, nodes);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>非递归实现</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inorderTraversal</span><span class=\"params\">(TreeNode node)</span> </span>&#123;</div><div class=\"line\">\tStack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</div><div class=\"line\">\tList&lt;Integer&gt; nodes = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">\tTreeNode curt = node;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">while</span>(curt != <span class=\"keyword\">null</span> || stack.isEmpty()) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(curt != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\tstack.push(curt);</div><div class=\"line\">\t\t\tcurt = curt.left;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tcurt = stack.pop();</div><div class=\"line\">\t\tnodes.add(curt.value);</div><div class=\"line\">\t\tcurt = curt.right;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> nodes;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"后序遍历\"><a href=\"#后序遍历\" class=\"headerlink\" title=\"后序遍历\"></a>后序遍历</h4><p>后序遍历的顺序是先遍历左子节点，再遍历右子节点，最后遍历当前节点。所以顺序是: <code>左子节点 -&gt; 右子节点 -&gt; 根</code>，具体代码实现如下:</p>\n<ul>\n<li>递归实现</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postorderTraversal</span><span class=\"params\">(TreeNode node, List&lt;Integer&gt; nodes)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(node =! <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\tpostorderTraversal(node.left, nodes);</div><div class=\"line\">\t\tpostorderTraversal(node.right, nodes);</div><div class=\"line\">\t\tnodes.add(node.value);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>非递归实现</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">postorderTraversal</span><span class=\"params\">(TreeNode node)</span> </span>&#123;</div><div class=\"line\">\tStack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</div><div class=\"line\">\tList&lt;Integer&gt; nodes = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">\tTreeNode prev = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t</div><div class=\"line\">\tstack.push(node);</div><div class=\"line\">\t<span class=\"keyword\">while</span>(!stack.isEmpty()) &#123;</div><div class=\"line\">\t\tTreeNode curt = stack.peek();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(prev == <span class=\"keyword\">null</span> || prev.left == curt || prev.right == curt) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(curt.left != <span class=\"keyword\">null</span>) </div><div class=\"line\">\t\t\t\tstack.push(curt.left);</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(curt.right != <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\tstack.push(curt.right);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(curt.left == prev) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(curt.right != <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\tstack.push(curt.right);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tnodes.add(curt.value);</div><div class=\"line\">\t\t\tstack.pop();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tprev = curt;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> nodes;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj77wke2t0000fiilq7blpxqp","category_id":"cj77wke330004fiilg7v14mwt","_id":"cj77wke3e000dfiilhjj848cc"},{"post_id":"cj77wke3c0009fiilglga7gv6","category_id":"cj77wke330004fiilg7v14mwt","_id":"cj77wke3g000gfiil7fg8qpis"},{"post_id":"cj77wke3e000cfiil41ec5g6r","category_id":"cj77wke330004fiilg7v14mwt","_id":"cj77wke3h000ifiiltqiss1ut"},{"post_id":"cj77wke310002fiil0bq42phj","category_id":"cj77wke3d000afiilajzmxx5m","_id":"cj77wke3i000mfiilq54s1bb9"},{"post_id":"cj77wke370006fiilw46k8h07","category_id":"cj77wke330004fiilg7v14mwt","_id":"cj77wke3j000ofiilhxk0r1ad"},{"post_id":"cj77wke3a0008fiilf38dud0v","category_id":"cj77wke3d000afiilajzmxx5m","_id":"cj77wke3j000rfiilbffprfof"}],"PostTag":[{"post_id":"cj77wke2t0000fiilq7blpxqp","tag_id":"cj77wke370005fiil0al0clzy","_id":"cj77wke3h000hfiiljp12ehb8"},{"post_id":"cj77wke2t0000fiilq7blpxqp","tag_id":"cj77wke3d000bfiilvo13ipxp","_id":"cj77wke3h000jfiil1u8r9szk"},{"post_id":"cj77wke310002fiil0bq42phj","tag_id":"cj77wke3f000ffiilxggz3s52","_id":"cj77wke3i000nfiilgqbr6vwj"},{"post_id":"cj77wke370006fiilw46k8h07","tag_id":"cj77wke3i000lfiiltckw9j5b","_id":"cj77wke3j000qfiil4spf6bux"},{"post_id":"cj77wke3a0008fiilf38dud0v","tag_id":"cj77wke3j000pfiilq6qlwkqj","_id":"cj77wke3k000tfiilju0yhxin"},{"post_id":"cj77wke3c0009fiilglga7gv6","tag_id":"cj77wke3j000sfiiliewjlimj","_id":"cj77wke3l000wfiilnmmraso9"},{"post_id":"cj77wke3c0009fiilglga7gv6","tag_id":"cj77wke3d000bfiilvo13ipxp","_id":"cj77wke3l000xfiili8djze8d"},{"post_id":"cj77wke3e000cfiil41ec5g6r","tag_id":"cj77wke3k000vfiilf73q8vxe","_id":"cj77wke3l000yfiily3jadtze"},{"post_id":"cj77wke3e000cfiil41ec5g6r","tag_id":"cj77wke3d000bfiilvo13ipxp","_id":"cj77wke3l000zfiild7c1wfl7"}],"Tag":[{"name":"kmp","_id":"cj77wke370005fiil0al0clzy"},{"name":"leetcode","_id":"cj77wke3d000bfiilvo13ipxp"},{"name":"随笔","_id":"cj77wke3f000ffiilxggz3s52"},{"name":"markdown","_id":"cj77wke3i000lfiiltckw9j5b"},{"name":"搞机","_id":"cj77wke3j000pfiilq6qlwkqj"},{"name":"sort","_id":"cj77wke3j000sfiiliewjlimj"},{"name":"binary tree","_id":"cj77wke3k000vfiilf73q8vxe"}]}}